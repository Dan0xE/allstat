#include "../AllStatDefs.h"

using namespace AllStat;

#ifndef __clang__
#pragma optimize("", off)
#endif

static const char* Src_OSReturnh = "OSReturn.h";
static const char* Src_kern_returnh = "kern_return.h";
static const char* Src_messageh = "message.h";
static const char* Src_OSKextLibh = "OSKextLib.h";
static const char* Src_IOReturnh = "IOReturn.h";
static const char* Src_IOKitusbUSBh = "IOKit/usb/USB.h";
static const char* Src_IOKitfirewireIOFireWireFamilyCommonh = "IOKit/firewire/IOFireWireFamilyCommon.h";
static const char* Src_IOKitbluetoothIOBluetoothTypes = "IOKit/bluetooth/IOBluetoothTypes.";

#if AS_COMPRESS_DESCRIPTION && !defined(AS_NO_DESCRIPTION)
static int DescrBlockSize = 11885;
static const uint8_t CompressedDescr[] =
{
  // Uncompressed size: 11885, Compressed size: 4292, Rate: 2.8
  0x1f, 0x8b, 0x08, 0x00, 0xf2, 0x16, 0x4b, 0x60, 0x02, 0xff, 0xe5, 0x5a, 0xdb, 0x72, 0xdc, 0xc8, 
  0x91, 0xc5, 0xa7, 0xc0, 0x7e, 0x19, 0x32, 0x2c, 0x35, 0x77, 0x5f, 0x35, 0x8e, 0x95, 0xa9, 0xa6, 
  0x62, 0xcd, 0x1d, 0x52, 0x64, 0x90, 0xd4, 0xd8, 0x13, 0xe1, 0x08, 0x46, 0x35, 0x50, 0xdd, 0x5d, 
  0x26, 0x1a, 0x85, 0x45, 0x01, 0x6c, 0xb5, 0xbf, 0x7e, 0xcf, 0xc9, 0xac, 0x02, 0xd0, 0x17, 0xc9, 
  0x1a, 0x3b, 0xe6, 0x69, 0xe7, 0x41, 0xc3, 0x06, 0xaa, 0xb2, 0xb2, 0xf2, 0x7a, 0x32, 0x13, 0x77, 
  0x8d, 0x6d, 0x4d, 0xe7, 0x7c, 0x9d, 0x87, 0xbe, 0x28, 0x6c, 0x08, 0xcb, 0xbe, 0x9a, 0x65, 0x59, 
  0xf6, 0xb9, 0x0e, 0x8d, 0x2d, 0xdc, 0xd2, 0xd9, 0x32, 0xbf, 0x71, 0x8b, 0x17, 0xdb, 0xd6, 0xb9, 
  0x6d, 0x5b, 0xdf, 0xce, 0xb2, 0xc7, 0xe1, 0x85, 0x29, 0xcb, 0x16, 0x5b, 0x72, 0x17, 0xf2, 0xda, 
  0x77, 0x79, 0xd1, 0xb7, 0xad, 0xad, 0xbb, 0x6a, 0x97, 0xbf, 0x9a, 0xca, 0x95, 0xd3, 0x95, 0x1b, 
  0xbb, 0xf1, 0xed, 0x8e, 0x0b, 0xe5, 0xd5, 0x9b, 0x7c, 0xd1, 0x77, 0x79, 0xe9, 0xad, 0x6e, 0x04, 
  0x0f, 0x1b, 0xd7, 0xe5, 0xdd, 0xda, 0xe6, 0xad, 0xfd, 0xdf, 0xde, 0xb5, 0xd8, 0xb1, 0xf4, 0xed, 
  0x26, 0xe4, 0x7e, 0x99, 0x1b, 0x61, 0x6b, 0x96, 0x3d, 0xe1, 0x6d, 0x3a, 0xb0, 0x35, 0xf5, 0xca, 
  0xe6, 0x23, 0x87, 0xa0, 0x6b, 0xaa, 0xd6, 0x9a, 0x12, 0x47, 0xd4, 0x79, 0x1f, 0xec, 0x9b, 0xdc, 
  0xb7, 0x20, 0x7d, 0xb0, 0x01, 0xd4, 0x78, 0x46, 0x70, 0xff, 0x98, 0x6e, 0x2e, 0x7c, 0x5f, 0x95, 
  0xf9, 0xc2, 0xe2, 0xc8, 0xbe, 0x2e, 0xf5, 0xa0, 0x65, 0x5f, 0x17, 0x22, 0x15, 0xf2, 0x63, 0x43, 
  0x87, 0x65, 0x5b, 0xa3, 0xcc, 0x9a, 0xa6, 0xa9, 0x5c, 0x61, 0x16, 0x95, 0xcd, 0x3b, 0x0f, 0x7a, 
  0x38, 0xbb, 0xdb, 0x35, 0x42, 0xdc, 0xb4, 0xab, 0x7e, 0x03, 0x09, 0xc8, 0xe9, 0xa6, 0x1e, 0x7e, 
  0x93, 0x3f, 0x57, 0xcb, 0xcd, 0xf7, 0xa9, 0xeb, 0xd1, 0xa4, 0x8a, 0xe3, 0x21, 0x05, 0x5e, 0xda, 
  0x96, 0xb3, 0x3c, 0xbf, 0xcc, 0x0b, 0xd3, 0x15, 0xeb, 0xb7, 0xa6, 0x82, 0x36, 0x2e, 0xf3, 0xb0, 
  0x03, 0x0b, 0x1b, 0x30, 0x13, 0x7c, 0xdf, 0x16, 0x76, 0x7f, 0x1f, 0xd6, 0x78, 0xac, 0x06, 0x8b, 
  0xe0, 0x07, 0xea, 0x5b, 0xba, 0xaa, 0x52, 0xbe, 0x22, 0xf3, 0xa0, 0xf7, 0xc4, 0x9f, 0x4b, 0xe3, 
  0xaa, 0xbe, 0xb5, 0xf9, 0xc6, 0xec, 0x26, 0x67, 0x6e, 0x4c, 0x0d, 0x16, 0xf5, 0xda, 0x9d, 0x09, 
  0x2f, 0x94, 0xa0, 0x6c, 0x23, 0x83, 0x83, 0x8a, 0xd6, 0x1e, 0x07, 0xb6, 0xb6, 0xb0, 0xee, 0x15, 
  0x4a, 0x72, 0xab, 0x75, 0x17, 0xa8, 0x22, 0x91, 0x67, 0xe3, 0xdb, 0x6e, 0xb8, 0xeb, 0x2c, 0xfb, 
  0xe0, 0x57, 0x7d, 0x88, 0x6a, 0x23, 0xcb, 0x5d, 0xeb, 0xe4, 0xb6, 0xb3, 0xec, 0xaa, 0x6f, 0x5d, 
  0xbd, 0xca, 0x4d, 0xde, 0x18, 0x68, 0x63, 0x69, 0xfa, 0x0a, 0xa2, 0xea, 0xe4, 0xdc, 0x76, 0x65, 
  0xbb, 0x51, 0x5b, 0x76, 0x69, 0xdb, 0xc0, 0xeb, 0x98, 0x64, 0x39, 0x7e, 0xf1, 0x77, 0x5b, 0xd0, 
  0x44, 0x0c, 0x78, 0x81, 0x26, 0x16, 0xd6, 0x82, 0x3b, 0x12, 0xf7, 0x3b, 0x91, 0xd8, 0xde, 0x0d, 
  0xf1, 0xe7, 0xe4, 0x66, 0x5f, 0x3d, 0x76, 0x9f, 0xb6, 0xab, 0x4b, 0x17, 0xe5, 0xc8, 0x53, 0xb8, 
  0xa0, 0x34, 0x9d, 0xd9, 0x17, 0x76, 0x6b, 0xbb, 0xbe, 0xad, 0x8f, 0x4f, 0xa4, 0x4c, 0xf1, 0x1a, 
  0x5a, 0x82, 0x34, 0x4c, 0xbb, 0xfb, 0x11, 0x9a, 0xe8, 0xf8, 0xc2, 0x74, 0x7c, 0xd6, 0xe9, 0x6d, 
  0x54, 0x26, 0xa2, 0x9b, 0x60, 0x36, 0x91, 0x3e, 0xb7, 0x8a, 0xf3, 0x59, 0xf8, 0x05, 0xae, 0x56, 
  0xda, 0xa5, 0xc3, 0x09, 0xf9, 0x62, 0x77, 0xcc, 0xa4, 0xaa, 0x69, 0x4f, 0x0f, 0x53, 0xe3, 0x17, 
  0x71, 0x2d, 0x6c, 0x9b, 0x2c, 0x9d, 0x9a, 0x09, 0xf6, 0x6b, 0xbb, 0xc4, 0x9a, 0x27, 0x3b, 0x8c, 
  0x6a, 0x72, 0xd8, 0x50, 0x93, 0xc5, 0x44, 0xba, 0xb4, 0x58, 0x0e, 0x63, 0x30, 0x69, 0x7f, 0x1d, 
  0x35, 0x17, 0x5e, 0x74, 0xb5, 0x1f, 0x22, 0x09, 0x3d, 0xc5, 0x2c, 0x40, 0x4a, 0xc4, 0x74, 0xdd, 
  0x14, 0x10, 0x61, 0x69, 0xf3, 0x2d, 0xed, 0x52, 0xcc, 0x5a, 0x25, 0x60, 0x6a, 0x5a, 0xd4, 0xb2, 
  0x12, 0xd9, 0x77, 0xbc, 0x39, 0x99, 0x09, 0x81, 0x4a, 0x8a, 0xa1, 0x66, 0xe0, 0x82, 0x76, 0x58, 
  0xff, 0xd0, 0x45, 0x2e, 0xbe, 0xc2, 0x84, 0x1a, 0x91, 0xda, 0xb0, 0xac, 0xa6, 0x0b, 0xc2, 0xf4, 
  0x5e, 0xa7, 0x6c, 0x2a, 0xb9, 0xfd, 0xcb, 0x68, 0x38, 0x12, 0x71, 0xd4, 0xf4, 0xef, 0xd6, 0x37, 
  0xad, 0x83, 0x25, 0xe8, 0x5b, 0x3a, 0xe0, 0xa2, 0x82, 0xa6, 0xe0, 0xc8, 0x1a, 0x47, 0x22, 0x77, 
  0x77, 0xe3, 0x8d, 0xc5, 0x44, 0xfc, 0x2b, 0x3c, 0xb8, 0xf2, 0xdb, 0xbc, 0x72, 0x0c, 0x67, 0x5e, 
  0x22, 0x51, 0xfb, 0x56, 0xac, 0xd9, 0xd6, 0x50, 0xbd, 0x72, 0x10, 0x7a, 0x46, 0x10, 0x28, 0xf8, 
  0x8c, 0xe2, 0x3e, 0x87, 0x48, 0x1a, 0xb3, 0x70, 0x95, 0xeb, 0x24, 0x3e, 0xba, 0x0d, 0x8f, 0xb7, 
  0xed, 0xc4, 0x21, 0x93, 0x0a, 0x68, 0xf7, 0xc1, 0x42, 0x6a, 0xf0, 0xbb, 0x6f, 0xb9, 0x22, 0xa2, 
  0x98, 0x65, 0xfc, 0xf1, 0x78, 0xd2, 0xca, 0x85, 0x07, 0xe1, 0xac, 0x7d, 0xe8, 0x92, 0x70, 0x8a, 
  0xae, 0x47, 0xe8, 0xa0, 0xd1, 0xf0, 0x29, 0x6e, 0x59, 0x27, 0x63, 0x15, 0x0d, 0x6e, 0x4c, 0x29, 
  0x11, 0x4e, 0xd8, 0xdd, 0xe5, 0x7f, 0xfb, 0x7d, 0x83, 0x33, 0x9d, 0xef, 0xc3, 0xdf, 0x7e, 0xaf, 
  0x76, 0xcb, 0x33, 0xa3, 0x71, 0x8a, 0xc3, 0x4c, 0xec, 0x10, 0x4b, 0x83, 0xc4, 0xbd, 0xfa, 0xd0, 
  0x83, 0x29, 0x4c, 0x71, 0x43, 0x1e, 0x31, 0x06, 0x57, 0xb1, 0xbe, 0xb8, 0x10, 0x6e, 0x8b, 0x05, 
  0x6d, 0xfe, 0xea, 0xd2, 0xa3, 0x67, 0xdd, 0xfb, 0xcc, 0x63, 0x9f, 0xe3, 0x26, 0x39, 0x1e, 0xea, 
  0x8a, 0xce, 0xdb, 0x07, 0x75, 0xf1, 0xdb, 0x8f, 0xb7, 0x77, 0x0f, 0xbf, 0x3c, 0xdf, 0x7d, 0xf8, 
  0x9f, 0x8f, 0xf3, 0xa7, 0xe7, 0xf9, 0xdd, 0xfd, 0x2f, 0xcf, 0xf3, 0xcb, 0x9b, 0x9b, 0x1c, 0x81, 
  0x02, 0x0a, 0x5d, 0xed, 0xde, 0xc0, 0x0c, 0xbb, 0xb5, 0xc8, 0xea, 0xe7, 0xdb, 0xe7, 0xfb, 0x87, 
  0xbb, 0xa7, 0xe7, 0xbf, 0x5c, 0x7e, 0x7a, 0x7a, 0x94, 0xa5, 0xf9, 0xb2, 0x32, 0x2b, 0xb8, 0x31, 
  0x49, 0x41, 0x75, 0x12, 0x50, 0x35, 0x4f, 0xec, 0xc6, 0x98, 0x20, 0xdc, 0x23, 0xf2, 0x48, 0x96, 
  0x72, 0x2a, 0x7a, 0x06, 0x89, 0x66, 0x97, 0xbc, 0x4e, 0x59, 0x7a, 0x23, 0x06, 0x3e, 0xf1, 0xe0, 
  0x74, 0xaf, 0xb5, 0xf8, 0x78, 0x87, 0x25, 0xb6, 0x1c, 0x29, 0x52, 0x1e, 0x4d, 0x1f, 0xd6, 0x24, 
  0x5a, 0x4b, 0xe4, 0x3b, 0x26, 0x99, 0x6f, 0xd7, 0x8e, 0x69, 0x07, 0x0f, 0x98, 0x90, 0x6d, 0x25, 
  0xbb, 0xb6, 0xa6, 0x7a, 0x21, 0xc7, 0x92, 0xda, 0xd6, 0xa6, 0x84, 0x01, 0x16, 0x6b, 0x03, 0xd1, 
  0x2f, 0x5b, 0xbf, 0x91, 0xa7, 0x42, 0x49, 0x92, 0x55, 0xa2, 0x34, 0xd3, 0xe8, 0x25, 0x86, 0xac, 
  0xde, 0xe9, 0xc8, 0x54, 0x05, 0x93, 0xe2, 0xb5, 0xbe, 0x22, 0x7a, 0x5d, 0xce, 0x6b, 0x61, 0xf5, 
  0x1a, 0xff, 0xaf, 0xc6, 0x30, 0x15, 0x19, 0x3a, 0x73, 0xa2, 0x19, 0x18, 0xfb, 0xf4, 0x29, 0xce, 
  0x66, 0x22, 0x30, 0xad, 0x8a, 0x50, 0x42, 0xf0, 0xf9, 0x2c, 0xbf, 0xee, 0x34, 0x28, 0xc4, 0xd8, 
  0x1a, 0x18, 0xd3, 0x41, 0x8e, 0x5e, 0x13, 0x24, 0xed, 0xa9, 0xd2, 0x5c, 0xa1, 0x37, 0x90, 0xb8, 
  0xa2, 0x16, 0x1a, 0x4d, 0x66, 0x54, 0x7f, 0x43, 0x2f, 0x5c, 0x3b, 0xc4, 0x16, 0x83, 0xec, 0xe5, 
  0x0a, 0x1c, 0xac, 0x9b, 0x24, 0xce, 0x6d, 0xe1, 0x18, 0x21, 0x38, 0xe4, 0x6c, 0x5e, 0x1c, 0x02, 
  0x81, 0xe1, 0x63, 0x41, 0x58, 0x8b, 0xdf, 0x22, 0xa6, 0xb7, 0xbb, 0x51, 0x50, 0x6a, 0x4a, 0xaf, 
  0x9b, 0x74, 0x75, 0x3e, 0x7c, 0x16, 0x9a, 0xd5, 0xee, 0xa4, 0xdc, 0x84, 0x6f, 0x5f, 0xc3, 0x49, 
  0xf6, 0x64, 0xa1, 0x1e, 0x95, 0x20, 0x80, 0x89, 0x4e, 0x4f, 0xd5, 0x06, 0x5c, 0x10, 0xa8, 0xa7, 
  0xf5, 0x4c, 0x07, 0x20, 0x84, 0x88, 0x8b, 0x5f, 0xee, 0x15, 0xca, 0x8d, 0x96, 0xa0, 0xa1, 0x79, 
  0x7f, 0x45, 0xe1, 0x6b, 0x64, 0xbb, 0x4a, 0x7c, 0x3c, 0x46, 0x92, 0x01, 0xc3, 0x84, 0x02, 0x86, 
  0xd3, 0x57, 0xe2, 0x03, 0x1d, 0x12, 0x2e, 0xe2, 0x19, 0x34, 0x60, 0xbf, 0x30, 0xa9, 0x68, 0x88, 
  0x5c, 0xd3, 0x33, 0x7f, 0x08, 0x1a, 0x9b, 0xc2, 0x37, 0xf6, 0x37, 0x1e, 0xf0, 0x66, 0x77, 0x8c, 
  0xe9, 0x6c, 0x4d, 0xcc, 0x53, 0x8e, 0xa1, 0x66, 0xca, 0x9c, 0xd2, 0xb3, 0x5f, 0x3a, 0xdc, 0xdc, 
  0x54, 0x87, 0x16, 0xcf, 0x24, 0xa9, 0x57, 0x77, 0xb5, 0xeb, 0x1c, 0x70, 0xd0, 0x3f, 0xec, 0xa9, 
  0xdc, 0x76, 0x19, 0xd9, 0x94, 0x50, 0xa2, 0x8a, 0x16, 0xc3, 0xf6, 0x90, 0x89, 0x1b, 0x3c, 0xde, 
  0xbe, 0x52, 0x9e, 0xfc, 0xa1, 0x0a, 0x67, 0x94, 0xb3, 0xfb, 0x59, 0x90, 0xcb, 0xd5, 0x25, 0xf8, 
  0xe4, 0xab, 0xa1, 0x2d, 0xe2, 0x07, 0x4d, 0xf5, 0x56, 0xac, 0xf2, 0xf0, 0x5a, 0x5f, 0xd9, 0xb9, 
  0xb4, 0x4c, 0x63, 0x64, 0x06, 0x22, 0x6e, 0x24, 0x07, 0x48, 0xe8, 0x4d, 0x81, 0x10, 0x54, 0xd4, 
  0xc1, 0x05, 0x0a, 0x52, 0xe7, 0x0b, 0x01, 0x49, 0xe9, 0x82, 0xea, 0xc8, 0xf1, 0xac, 0x08, 0x4e, 
  0xd2, 0x96, 0x91, 0x26, 0x25, 0x02, 0xc1, 0x51, 0x84, 0x29, 0x5c, 0x4a, 0xd4, 0x49, 0xd9, 0x2a, 
  0x65, 0x12, 0x95, 0xbe, 0x30, 0x30, 0x1a, 0x4f, 0x94, 0x6d, 0x61, 0x0a, 0x31, 0xec, 0xa9, 0xed, 
  0x4c, 0xed, 0x72, 0xc8, 0x46, 0xa3, 0x61, 0x06, 0x0b, 0xad, 0x33, 0x1d, 0x9d, 0xb2, 0x49, 0xc9, 
  0x20, 0xe3, 0x0a, 0xa1, 0xa7, 0x97, 0x7a, 0x2e, 0x2d, 0xe3, 0x7e, 0x78, 0xd6, 0xbb, 0x72, 0x8b, 
  0xf8, 0x59, 0xc9, 0x4c, 0x38, 0xbd, 0x39, 0x24, 0x97, 0xe8, 0x8d, 0xe6, 0x15, 0x37, 0xf3, 0x32, 
  0x77, 0xea, 0xd3, 0x03, 0xcc, 0xeb, 0x58, 0x1e, 0xd4, 0x82, 0xcc, 0x62, 0xec, 0x01, 0xb2, 0xaf, 
  0x7c, 0x4d, 0xb9, 0x98, 0x57, 0xd8, 0x16, 0x0d, 0x33, 0xbb, 0xf1, 0xc5, 0x8b, 0xf8, 0xc9, 0x31, 
  0x3c, 0xfc, 0xc6, 0xb6, 0x98, 0x66, 0x95, 0x37, 0x82, 0xdc, 0x14, 0x49, 0x2b, 0x92, 0x9b, 0x9c, 
  0xbc, 0xb0, 0xb0, 0x38, 0x82, 0xa8, 0xca, 0x9a, 0x30, 0x5d, 0x24, 0x04, 0x64, 0xf5, 0xc4, 0x04, 
  0xfd, 0x36, 0x22, 0xb8, 0x94, 0x85, 0xf5, 0x84, 0x6f, 0xaf, 0xed, 0x62, 0x64, 0x1a, 0x2d, 0x37, 
  0x7b, 0xb4, 0x1b, 0xd3, 0xac, 0x79, 0xf0, 0xaf, 0xbc, 0xd5, 0x83, 0xe0, 0x54, 0x4d, 0x01, 0x0f, 
  0xf7, 0xf3, 0x04, 0x6e, 0x13, 0xe3, 0x11, 0x70, 0x43, 0xdd, 0xaf, 0xd1, 0xb8, 0x8e, 0xaf, 0xea, 
  0xba, 0x49, 0x4d, 0x08, 0x0d, 0xb5, 0x56, 0x0c, 0x25, 0x7b, 0x4a, 0x2b, 0x25, 0xfe, 0xb6, 0x0d, 
  0x12, 0x01, 0x99, 0x21, 0xd0, 0x32, 0xd1, 0x6a, 0x2b, 0xa2, 0xa0, 0xd3, 0x6f, 0x69, 0x67, 0xb4, 
  0x46, 0x57, 0xf7, 0x0c, 0x18, 0x30, 0x24, 0x32, 0x35, 0xcb, 0x3e, 0xc2, 0xc5, 0x76, 0x49, 0x11, 
  0x93, 0xe5, 0x67, 0x9f, 0x7c, 0x7a, 0x0a, 0xc1, 0xbc, 0xc4, 0x30, 0xd2, 0x9d, 0xe3, 0x86, 0x1b, 
  0x42, 0xc1, 0x9a, 0x41, 0x18, 0x39, 0x8f, 0x87, 0xe1, 0x96, 0x0a, 0xb1, 0x25, 0xd2, 0x33, 0x81, 
  0xb8, 0x55, 0xad, 0x26, 0x98, 0xac, 0x2f, 0xd9, 0x71, 0x02, 0x3f, 0x31, 0x52, 0xa0, 0x56, 0xf5, 
  0x9b, 0x64, 0x07, 0x6f, 0x7d, 0xeb, 0x60, 0x94, 0x34, 0xdc, 0x01, 0xe1, 0x9d, 0x85, 0xa4, 0x89, 
  0x67, 0x6e, 0x39, 0xcf, 0x3b, 0xb7, 0xe1, 0x82, 0xbe, 0x3b, 0x5d, 0x5e, 0xa4, 0x62, 0x22, 0x1c, 
  0x00, 0x07, 0xf5, 0xe3, 0xbf, 0xab, 0xa3, 0x0b, 0xe4, 0x85, 0xd5, 0x33, 0xee, 0x08, 0x02, 0x12, 
  0x7e, 0xa5, 0x6c, 0x80, 0xd3, 0x16, 0x2f, 0x09, 0xb7, 0x27, 0x94, 0xa4, 0xc8, 0xb0, 0xa3, 0x53, 
  0xd7, 0x31, 0x67, 0x22, 0xd3, 0x43, 0xf5, 0x20, 0xd5, 0xc5, 0x52, 0xd4, 0x6d, 0xa2, 0x4d, 0x63, 
  0xf1, 0xab, 0x2b, 0x25, 0x5a, 0x2c, 0x01, 0x40, 0x69, 0x29, 0x38, 0xc3, 0xd5, 0x01, 0x3f, 0x5d, 
  0xe1, 0xc4, 0xf7, 0x19, 0x87, 0x53, 0x3c, 0x1f, 0x8f, 0x61, 0xae, 0x47, 0xd5, 0x64, 0x6b, 0xa7, 
  0x76, 0x39, 0xf1, 0x76, 0xa6, 0x86, 0xec, 0x27, 0x4d, 0xea, 0x43, 0x35, 0x8a, 0x34, 0xda, 0x76, 
  0xbc, 0x9c, 0x40, 0x02, 0xca, 0x02, 0x62, 0x79, 0xeb, 0x97, 0x6f, 0xf1, 0x77, 0x8a, 0xf1, 0xb3, 
  0xef, 0xd8, 0x05, 0x83, 0xb9, 0x86, 0xa9, 0x8e, 0x78, 0x78, 0x96, 0x41, 0xf9, 0xad, 0x87, 0x09, 
  0x03, 0xcd, 0xfc, 0x7c, 0x3b, 0xd4, 0x87, 0xa1, 0x31, 0x85, 0x32, 0x7e, 0xea, 0xa0, 0xc9, 0x1e, 
  0x92, 0x13, 0xc0, 0x3f, 0xee, 0x48, 0x0e, 0x39, 0x41, 0xdd, 0x8a, 0x90, 0x61, 0xb4, 0x9a, 0x10, 
  0x91, 0xbf, 0x26, 0xf9, 0x7d, 0x81, 0x6c, 0x39, 0x96, 0x64, 0x16, 0x86, 0x4d, 0xf1, 0xa6, 0x2c, 
  0x35, 0x24, 0x1a, 0x2f, 0xc8, 0x1c, 0xe5, 0xce, 0xd9, 0x75, 0x1d, 0x93, 0x20, 0x60, 0x8c, 0xa0, 
  0x82, 0xd9, 0x79, 0x2c, 0x89, 0x5d, 0xad, 0x8c, 0xaa, 0x7c, 0xf5, 0x19, 0xbd, 0x99, 0xce, 0x94, 
  0x32, 0xc8, 0x2c, 0xbb, 0x8d, 0x25, 0x90, 0x04, 0x78, 0x6a, 0x29, 0xba, 0x23, 0x35, 0x8b, 0xeb, 
  0xc2, 0x67, 0x1a, 0x26, 0x81, 0x44, 0xe0, 0xd5, 0xf7, 0x05, 0xef, 0xa3, 0x9b, 0x1f, 0xfd, 0xb2, 
  0xdb, 0x1a, 0x3a, 0x2f, 0xb9, 0x68, 0xfb, 0x86, 0xe5, 0x2f, 0xc1, 0x7a, 0x2a, 0xa0, 0xe8, 0x7a, 
  0x46, 0x60, 0x79, 0xe1, 0x37, 0x4d, 0x05, 0x18, 0x9a, 0x6a, 0xae, 0x44, 0x90, 0x6e, 0x9e, 0x02, 
  0xbb, 0x3e, 0x91, 0xc4, 0x12, 0x0b, 0x8d, 0x58, 0x71, 0xa5, 0x3a, 0x6d, 0xe1, 0xcb, 0x5d, 0x5a, 
  0x06, 0x86, 0x09, 0x94, 0x0f, 0xba, 0x01, 0xd7, 0xda, 0xf7, 0x38, 0xa1, 0x29, 0xac, 0x14, 0x2e, 
  0x45, 0x63, 0x03, 0xc1, 0xc1, 0x58, 0x27, 0xc1, 0xec, 0xd1, 0x6a, 0xa4, 0xeb, 0x3c, 0x42, 0x1d, 
  0x23, 0x97, 0x68, 0x92, 0x07, 0x0d, 0xe4, 0x37, 0x61, 0xf5, 0x56, 0xda, 0x30, 0x11, 0xd3, 0x14, 
  0x29, 0x14, 0xe5, 0xc0, 0x37, 0x55, 0x99, 0xf8, 0x5e, 0x43, 0x6f, 0x02, 0xc1, 0xe1, 0x31, 0xf9, 
  0x02, 0xff, 0x62, 0x77, 0x9f, 0x92, 0x40, 0x4b, 0x98, 0x22, 0xd9, 0x5a, 0xc0, 0x68, 0x3d, 0xe9, 
  0x50, 0x6d, 0xa4, 0x6c, 0x8d, 0x68, 0x96, 0x5d, 0x1a, 0x93, 0x20, 0x18, 0x58, 0x1b, 0xe3, 0xb5, 
  0x88, 0x17, 0x28, 0x28, 0x2f, 0x5d, 0x39, 0xd9, 0xd7, 0xc5, 0x0c, 0xcc, 0x37, 0xbe, 0x8e, 0x70, 
  0x03, 0x69, 0x54, 0x6e, 0x40, 0x3d, 0x80, 0x59, 0xb5, 0xc5, 0x77, 0xd3, 0x68, 0x3e, 0x34, 0x1b, 
  0xd4, 0x1e, 0xe5, 0xbc, 0x43, 0x7b, 0x19, 0x14, 0xcb, 0xc0, 0xd7, 0x28, 0x49, 0xd1, 0x12, 0x35, 
  0x33, 0xd8, 0x92, 0x54, 0x8d, 0x7b, 0xa1, 0x07, 0x6e, 0x9d, 0x44, 0xbe, 0x74, 0x15, 0xb4, 0x70, 
  0xc2, 0xa8, 0x97, 0x63, 0x9d, 0xf9, 0x6d, 0xc3, 0x16, 0x17, 0x9b, 0xac, 0x16, 0x2e, 0x2e, 0xf8, 
  0xcf, 0x5b, 0x01, 0x51, 0x57, 0xae, 0x24, 0x8b, 0xd2, 0xe2, 0x19, 0x8e, 0x65, 0x1d, 0x96, 0xea, 
  0xf7, 0x68, 0xda, 0x51, 0x19, 0xb7, 0x47, 0xb6, 0x40, 0x51, 0xaa, 0xe2, 0x51, 0xb8, 0xf7, 0xab, 
  0xb5, 0x1c, 0xe6, 0xea, 0x89, 0x37, 0x9d, 0x32, 0xfc, 0xef, 0x97, 0xec, 0xb7, 0x0c, 0x58, 0xdf, 
  0x1d, 0xd8, 0xe7, 0xd1, 0xf9, 0xf7, 0xbc, 0x31, 0xd1, 0xc7, 0x56, 0x8b, 0x74, 0x50, 0xd8, 0x9a, 
  0xdd, 0x45, 0xc9, 0x10, 0x5a, 0x6a, 0x82, 0x48, 0xa2, 0xfc, 0x15, 0x7c, 0x7d, 0x94, 0x38, 0xa4, 
  0x1b, 0x49, 0x22, 0x71, 0xa1, 0x66, 0x0c, 0xa5, 0x3c, 0x5a, 0x3b, 0x04, 0xad, 0x85, 0xe0, 0xfa, 
  0xaf, 0x6d, 0x11, 0x4f, 0x3d, 0xb5, 0xe1, 0xdb, 0x1e, 0x44, 0x53, 0x0a, 0x05, 0x21, 0x70, 0x8b, 
  0xfc, 0xcb, 0x36, 0xc1, 0xdd, 0xc4, 0x91, 0xd9, 0xf1, 0xd8, 0x22, 0x35, 0x30, 0x7b, 0xac, 0x64, 
  0xf5, 0xb1, 0xae, 0xb2, 0xc1, 0xaf, 0xa4, 0x4b, 0xda, 0xe6, 0x75, 0x3f, 0xb4, 0xa8, 0xe2, 0x1b, 
  0x60, 0x2a, 0xca, 0x3a, 0x0c, 0xa0, 0x56, 0x7a, 0x47, 0xd9, 0x5f, 0x8e, 0xed, 0x30, 0x56, 0xef, 
  0x6a, 0x2f, 0xb3, 0xd3, 0x36, 0x19, 0x3b, 0xad, 0x93, 0x40, 0xa6, 0xc5, 0xbc, 0x44, 0xbd, 0xc7, 
  0xa7, 0x87, 0xeb, 0xf9, 0xd3, 0xf3, 0xc3, 0xc7, 0xfb, 0x9b, 0x5f, 0x92, 0x6c, 0xb2, 0x81, 0xca, 
  0xdd, 0xe3, 0xad, 0xed, 0xcc, 0xbc, 0x32, 0x6c, 0x42, 0xf6, 0xf5, 0x5b, 0x1e, 0x94, 0xba, 0x3d, 
  0x97, 0x70, 0x7f, 0xf8, 0xef, 0x98, 0x7a, 0xfb, 0xba, 0xf2, 0x46, 0x12, 0xac, 0x2d, 0x0c, 0xcf, 
  0xd7, 0x42, 0x44, 0x8d, 0x10, 0xc5, 0x2e, 0x3b, 0x3e, 0xf0, 0x57, 0x60, 0x68, 0x56, 0x4d, 0x04, 
  0x62, 0xa9, 0x91, 0x3e, 0xff, 0xc3, 0x1f, 0xf2, 0x82, 0x87, 0x24, 0x78, 0xe0, 0xba, 0x98, 0x62, 
  0x44, 0x1f, 0x91, 0x19, 0x39, 0xf7, 0x9d, 0xd4, 0xab, 0x47, 0x1b, 0x45, 0xde, 0x52, 0x1e, 0x4b, 
  0xeb, 0x5e, 0xdb, 0xc3, 0x09, 0xdc, 0x28, 0x4c, 0xa8, 0x76, 0x93, 0x6a, 0x6b, 0x30, 0x42, 0xb9, 
  0x03, 0xf9, 0x16, 0xd0, 0x73, 0x78, 0x16, 0x0b, 0x03, 0xed, 0x26, 0x93, 0x6c, 0xea, 0x6d, 0xfa, 
  0x42, 0x60, 0x7a, 0x19, 0x0f, 0xb5, 0x42, 0xe8, 0xd4, 0x5d, 0xfe, 0xbf, 0x9d, 0xa1, 0x30, 0xe1, 
  0x24, 0x59, 0x33, 0xb8, 0xd1, 0x09, 0xe5, 0x7d, 0x17, 0xfd, 0x4f, 0xd2, 0x7a, 0xb3, 0xad, 0x6e, 
  0x81, 0xd9, 0x0d, 0x23, 0x8a, 0xd8, 0x72, 0xfa, 0x0d, 0x0f, 0xd8, 0xae, 0x2d, 0x87, 0x13, 0xb0, 
  0xe2, 0xb6, 0x2f, 0xba, 0x88, 0xcd, 0x92, 0x51, 0x2b, 0x54, 0x3d, 0x3a, 0x94, 0x1e, 0x52, 0xf6, 
  0x32, 0x1b, 0xe9, 0x4e, 0x58, 0xac, 0xe4, 0x08, 0x5a, 0xa8, 0xad, 0x0b, 0x9c, 0xd1, 0x49, 0x9f, 
  0xe9, 0xbb, 0xf8, 0x7c, 0x92, 0x8e, 0xca, 0x97, 0x58, 0xff, 0x9f, 0xb8, 0x2d, 0x58, 0xff, 0xa1, 
  0x1b, 0x99, 0x3f, 0x49, 0xf4, 0xb2, 0xd6, 0xcc, 0x30, 0xd0, 0x4d, 0x88, 0x40, 0x97, 0xb9, 0x05, 
  0x9b, 0xf6, 0xb3, 0x7c, 0xce, 0x3a, 0xd9, 0x84, 0x4e, 0xe3, 0xcc, 0x1f, 0x89, 0x00, 0xff, 0xeb, 
  0x4f, 0xac, 0x3b, 0xf2, 0x8b, 0x0b, 0x76, 0x70, 0xec, 0x73, 0x6b, 0x97, 0x17, 0xc5, 0x85, 0x15, 
  0xe1, 0x5c, 0xdc, 0x3d, 0x6a, 0x9d, 0xa5, 0x41, 0x77, 0xef, 0xd7, 0x9f, 0x2e, 0xb8, 0xed, 0x8f, 
  0x17, 0x42, 0x82, 0x39, 0x4d, 0x20, 0xcf, 0x81, 0x55, 0x12, 0xc6, 0x49, 0xe1, 0x31, 0xa0, 0xe2, 
  0x54, 0x2d, 0x42, 0xde, 0x11, 0x25, 0x9d, 0xa1, 0x08, 0x5b, 0x4b, 0xa9, 0x90, 0x00, 0x91, 0xdc, 
  0x0a, 0x25, 0xdc, 0x2a, 0x9c, 0x33, 0xe0, 0xda, 0x2f, 0x6b, 0x84, 0x9f, 0x2e, 0xb5, 0x01, 0x62, 
  0x6f, 0xab, 0x32, 0xc5, 0x4b, 0x18, 0x2b, 0x78, 0x99, 0x3f, 0xc4, 0x09, 0xd3, 0x01, 0xdc, 0x1f, 
  0x8a, 0x9c, 0x31, 0x17, 0x8c, 0xd9, 0xef, 0xd1, 0x9a, 0x16, 0xc7, 0x3b, 0xc6, 0x17, 0xc6, 0x96, 
  0x38, 0x23, 0xbb, 0x35, 0x95, 0xce, 0xaa, 0xb4, 0x15, 0x7c, 0xc6, 0x57, 0x12, 0x64, 0xa9, 0xa3, 
  0xbf, 0xde, 0xde, 0x9c, 0xa7, 0x44, 0x04, 0x39, 0x21, 0x47, 0x88, 0x09, 0xe1, 0xd7, 0x59, 0x5f, 
  0x9f, 0xa3, 0xe6, 0x94, 0x98, 0xc4, 0x47, 0x9f, 0x1f, 0x6e, 0xde, 0xb0, 0xcb, 0x87, 0xbf, 0xa5, 
  0x51, 0x82, 0x9d, 0xd3, 0xb6, 0xfa, 0x5e, 0x71, 0x2b, 0x03, 0xbd, 0x2e, 0xdf, 0xd9, 0x49, 0x8a, 
  0x38, 0x58, 0x3c, 0xe9, 0x26, 0xb8, 0x20, 0xdd, 0x2a, 0xa4, 0xef, 0x9e, 0x6d, 0xca, 0x71, 0xdc, 
  0x11, 0x31, 0x1c, 0x5b, 0x55, 0x75, 0x90, 0x4b, 0xff, 0xcc, 0x2b, 0xef, 0x45, 0x8a, 0x3d, 0x23, 
  0xfd, 0x51, 0x6b, 0x31, 0x90, 0x34, 0xab, 0xda, 0x03, 0x7d, 0x15, 0xda, 0xf3, 0x2d, 0x91, 0x29, 
  0x5c, 0x45, 0xb3, 0xef, 0x21, 0xcf, 0xce, 0x15, 0xff, 0x06, 0x89, 0x2b, 0xdb, 0x00, 0xa1, 0x61, 
  0xc7, 0x4e, 0x2c, 0xa1, 0xea, 0xff, 0x75, 0x52, 0x3f, 0x09, 0xfc, 0x4c, 0xb8, 0x35, 0xc1, 0x7d, 
  0x29, 0x65, 0x8e, 0x2b, 0x3d, 0xea, 0xd6, 0xb1, 0xeb, 0x84, 0x63, 0xc4, 0x47, 0x0e, 0x22, 0xda, 
  0x5e, 0x83, 0x2a, 0x66, 0x99, 0x98, 0x05, 0xc1, 0xc6, 0x54, 0xfa, 0x43, 0x7b, 0xa2, 0xf1, 0x4a, 
  0x39, 0xec, 0xea, 0x62, 0xdd, 0x7a, 0x40, 0x80, 0x50, 0x49, 0xf3, 0x99, 0x5d, 0xdd, 0x58, 0x87, 
  0x9d, 0x45, 0x25, 0x30, 0x61, 0x9f, 0x47, 0x96, 0x05, 0x36, 0xc0, 0xae, 0xc5, 0xc0, 0xc9, 0xc3, 
  0x40, 0x5a, 0xf4, 0xc6, 0x8e, 0x82, 0x96, 0xb9, 0x51, 0xc9, 0x00, 0x34, 0xdc, 0x61, 0x5f, 0xd9, 
  0x68, 0xfd, 0x69, 0x3f, 0x33, 0x6b, 0x5e, 0xfe, 0xe7, 0x8a, 0xc3, 0xab, 0xa5, 0xcc, 0x66, 0x00, 
  0x3d, 0x6d, 0x1b, 0xa4, 0xce, 0xc7, 0x02, 0xed, 0x4a, 0x08, 0x23, 0x9f, 0x3f, 0x5f, 0x5f, 0x89, 
  0x65, 0x4e, 0x9e, 0x01, 0x3a, 0x0b, 0xe1, 0xd0, 0x6f, 0xce, 0x53, 0x7f, 0x7e, 0x14, 0xa9, 0x88, 
  0x67, 0xd2, 0xdd, 0x51, 0x5e, 0xa4, 0x93, 0x47, 0xaf, 0x3d, 0x10, 0xb0, 0x74, 0xc6, 0xca, 0x51, 
  0xfb, 0x91, 0x9c, 0x10, 0xd1, 0x39, 0xc4, 0x64, 0x3f, 0xc3, 0xd0, 0x5e, 0x2e, 0xe3, 0x54, 0x5a, 
  0xa7, 0x19, 0x38, 0x50, 0xf6, 0x48, 0x84, 0x1c, 0xe9, 0x69, 0x44, 0x90, 0x37, 0xda, 0x7d, 0x67, 
  0x5b, 0xb3, 0xf3, 0x0d, 0x0a, 0x64, 0xb6, 0x5d, 0xc6, 0x71, 0xa6, 0xb4, 0x32, 0xc7, 0x99, 0x5b, 
  0xba, 0xc4, 0xe8, 0x50, 0x3a, 0x56, 0xe7, 0x7e, 0x6a, 0x1a, 0xbb, 0x99, 0x0b, 0x4a, 0x85, 0xb5, 
  0x69, 0xbc, 0xa5, 0x13, 0x8f, 0x63, 0x80, 0x34, 0x60, 0xa7, 0x34, 0xba, 0x21, 0x89, 0xa1, 0x7f, 
  0xb2, 0x7f, 0x62, 0x8c, 0xca, 0xd1, 0xf0, 0x28, 0x0f, 0xf2, 0xdb, 0xe0, 0xa0, 0x1f, 0xd3, 0xf6, 
  0x30, 0x39, 0x82, 0xfd, 0xd8, 0x09, 0x01, 0x19, 0xa2, 0xb4, 0xd2, 0x20, 0x4e, 0x98, 0x2b, 0x66, 
  0x00, 0x64, 0x05, 0x9d, 0x66, 0xa9, 0x11, 0x6b, 0x27, 0x63, 0x96, 0xdd, 0xc4, 0xb7, 0x51, 0xee, 
  0x8f, 0xfa, 0xf6, 0xa7, 0x79, 0x8c, 0xce, 0xd9, 0xf5, 0x12, 0x76, 0x16, 0xe7, 0x45, 0xf1, 0x25, 
  0xef, 0x78, 0xd9, 0x7f, 0xc1, 0x22, 0x9d, 0xfe, 0x92, 0x2a, 0x0f, 0x91, 0x91, 0xb2, 0x72, 0x3f, 
  0x69, 0x1f, 0xc8, 0x7c, 0x63, 0x61, 0xdf, 0x31, 0xc5, 0xd0, 0xea, 0x9f, 0xc9, 0x27, 0x07, 0x29, 
  0x67, 0xff, 0xf1, 0xe5, 0x3f, 0x97, 0xe7, 0xbf, 0xfd, 0x01, 0x71, 0xc6, 0x51, 0x5b, 0x36, 0xfa, 
  0xe2, 0x90, 0x25, 0x5b, 0xd9, 0x1a, 0xde, 0x15, 0x33, 0x61, 0xa6, 0xf9, 0x33, 0x7d, 0x46, 0x10, 
  0xf3, 0x4e, 0x76, 0xd4, 0xa8, 0xc9, 0xf4, 0xd4, 0x98, 0x5e, 0xaf, 0xef, 0xe7, 0x59, 0x4d, 0x04, 
  0x81, 0xec, 0x50, 0xda, 0x57, 0x57, 0xd8, 0x6c, 0x6c, 0x17, 0xbf, 0x3a, 0x5f, 0x89, 0xf3, 0x0e, 
  0x60, 0x3c, 0x65, 0x94, 0x4c, 0xd7, 0xe6, 0xda, 0xd0, 0xf3, 0xc5, 0x0b, 0x84, 0x1c, 0x1f, 0x69, 
  0x21, 0x11, 0x9f, 0xd9, 0x2f, 0x45, 0xd5, 0x07, 0x22, 0xfe, 0x38, 0x34, 0x87, 0x54, 0x32, 0xd6, 
  0x55, 0x17, 0xb1, 0x12, 0x28, 0x13, 0x7a, 0x0f, 0x59, 0x5f, 0x0f, 0x09, 0x61, 0xf8, 0xb4, 0x22, 
  0xdb, 0xb8, 0x50, 0xcc, 0xd8, 0x34, 0x8a, 0x1e, 0x93, 0xed, 0xa7, 0xff, 0xec, 0xbf, 0xa3, 0x08, 
  0xae, 0x2f, 0xee, 0xe2, 0x93, 0xf7, 0xef, 0xdf, 0x27, 0x51, 0x14, 0xd2, 0x68, 0xd7, 0xf6, 0x6e, 
  0xe4, 0x8e, 0x06, 0x87, 0x98, 0x54, 0x67, 0xc2, 0xf9, 0x7e, 0xa1, 0xa2, 0x9c, 0xef, 0x3f, 0xc3, 
  0xad, 0x57, 0xb5, 0x74, 0xd8, 0x95, 0xfa, 0xad, 0x45, 0x1c, 0xca, 0x25, 0x29, 0x46, 0x92, 0x67, 
  0x48, 0xdf, 0x88, 0x4a, 0x50, 0x9f, 0xd2, 0x85, 0x96, 0x12, 0xaf, 0x57, 0xb7, 0x97, 0xe3, 0xdf, 
  0x7a, 0xfe, 0x87, 0x3e, 0xec, 0x32, 0x32, 0xfb, 0xa4, 0xc5, 0x4f, 0xe2, 0xcb, 0x2f, 0x97, 0x2c, 
  0xc5, 0x32, 0x9e, 0x2e, 0x11, 0x67, 0xca, 0x30, 0xea, 0x36, 0x06, 0xea, 0x92, 0x9a, 0x22, 0x4d, 
  0x76, 0x0b, 0x11, 0x78, 0x03, 0xe2, 0xe6, 0xb2, 0x13, 0xf5, 0x0d, 0x7d, 0x31, 0xe6, 0xf1, 0x4c, 
  0x4b, 0xdf, 0x18, 0xb9, 0xec, 0x17, 0xa0, 0xd9, 0x10, 0x45, 0xb2, 0xa5, 0x3c, 0xd8, 0x66, 0xe5, 
  0xae, 0xa1, 0xc6, 0x3e, 0x3a, 0x60, 0xd9, 0x02, 0xe6, 0x31, 0x61, 0xc1, 0x53, 0x7b, 0x3c, 0xf6, 
  0x12, 0x57, 0x59, 0x7f, 0xa0, 0xbc, 0x4c, 0x45, 0x5c, 0x99, 0x8d, 0x1f, 0xfd, 0x74, 0xba, 0xb7, 
  0x41, 0x74, 0x6f, 0x75, 0x24, 0x23, 0xa6, 0xb4, 0x11, 0x69, 0x69, 0x31, 0x23, 0xa3, 0xe4, 0xc9, 
  0x13, 0x6d, 0xbf, 0xc4, 0x8d, 0x62, 0x7f, 0x1b, 0x38, 0x42, 0x26, 0x40, 0x44, 0x46, 0xdf, 0xa8, 
  0xdc, 0xf4, 0x17, 0x4f, 0xe7, 0x0f, 0x6d, 0xb8, 0x88, 0x54, 0x22, 0x0e, 0xd8, 0xfa, 0x56, 0x66, 
  0xa6, 0xa9, 0x54, 0xfa, 0x5d, 0x36, 0x34, 0xc4, 0xe4, 0xab, 0x9f, 0x18, 0x1e, 0xdd, 0x38, 0x74, 
  0xc9, 0xc6, 0x84, 0x14, 0xbf, 0x6d, 0xc8, 0x16, 0x3d, 0x72, 0x1e, 0xec, 0x72, 0xeb, 0x4a, 0x78, 
  0xf0, 0x36, 0x7d, 0x46, 0xa4, 0x53, 0xb7, 0xd1, 0xae, 0x55, 0x33, 0xa1, 0xf1, 0x12, 0x2f, 0x33, 
  0x17, 0x7c, 0x4a, 0x8c, 0x62, 0x7c, 0xd3, 0x79, 0x36, 0x60, 0x8b, 0x7c, 0x66, 0xd0, 0x00, 0x82, 
  0xfe, 0xee, 0xbb, 0x56, 0xea, 0x57, 0x26, 0x7a, 0xdd, 0x54, 0xff, 0x09, 0x46, 0xcb, 0xee, 0x1d, 
  0x6b, 0xf9, 0x0e, 0x6e, 0xfd, 0x46, 0x3a, 0x5d, 0xf3, 0x87, 0xf9, 0xfe, 0x33, 0x54, 0xff, 0x1d, 
  0x7b, 0xc1, 0xe0, 0x69, 0xfa, 0xfc, 0x83, 0x89, 0xa0, 0xae, 0xf3, 0xab, 0x55, 0x65, 0xf7, 0xde, 
  0xdd, 0x5f, 0x5f, 0x91, 0x4e, 0x34, 0xe9, 0xc3, 0x5d, 0x9c, 0xc8, 0x81, 0xdd, 0x15, 0x97, 0x65, 
  0x0f, 0x56, 0x86, 0x0b, 0xe5, 0xf8, 0xc7, 0x07, 0x6d, 0x9d, 0xdc, 0xa9, 0x52, 0xf2, 0xb3, 0x3f, 
  0x7b, 0x49, 0x05, 0x6d, 0x29, 0x7d, 0x9b, 0x21, 0xb1, 0xd5, 0x7a, 0x3a, 0x34, 0x80, 0xf3, 0xe6, 
  0xd7, 0x39, 0xa4, 0xbc, 0x7b, 0x7f, 0x9e, 0x76, 0x7f, 0x8e, 0x0a, 0xfe, 0xb5, 0xdb, 0x9f, 0x5a, 
  0x53, 0x07, 0x53, 0x0c, 0x80, 0x42, 0x6c, 0xea, 0xe4, 0xc3, 0xd4, 0x0b, 0x1c, 0xde, 0x8c, 0xd9, 
  0x26, 0xf4, 0x0b, 0x35, 0xd9, 0xa1, 0xe4, 0x77, 0x5d, 0xd4, 0xfb, 0x64, 0xd4, 0x9a, 0xb0, 0xca, 
  0xd8, 0xe7, 0x68, 0x52, 0x93, 0x70, 0xa4, 0x1a, 0x04, 0x6d, 0xd5, 0xa5, 0xf4, 0x40, 0x63, 0xe1, 
  0xa2, 0x0d, 0x0a, 0x96, 0x64, 0x8f, 0x0d, 0x89, 0x8d, 0x26, 0x9b, 0xa2, 0xe8, 0x59, 0x1f, 0x74, 
  0x6c, 0xb1, 0xdf, 0x72, 0x50, 0x9c, 0xfc, 0x31, 0x51, 0x9b, 0xb3, 0xbf, 0x54, 0x93, 0xf5, 0x2b, 
  0x1b, 0x8a, 0xd6, 0x35, 0x9d, 0x6f, 0xcf, 0xa7, 0xa3, 0x84, 0xe9, 0xfc, 0x20, 0x76, 0x81, 0xf7, 
  0xba, 0x18, 0xf9, 0x5f, 0xff, 0x0c, 0xc9, 0xc5, 0x99, 0x21, 0x8b, 0x89, 0x01, 0x4f, 0xc6, 0xf8, 
  0x46, 0xcc, 0x6e, 0xcd, 0x26, 0xc4, 0x96, 0xa4, 0xb0, 0x39, 0xd2, 0xb4, 0xb8, 0x39, 0x7d, 0xe5, 
  0x80, 0xe8, 0x84, 0x5e, 0x5c, 0x9b, 0xa8, 0x6d, 0xd8, 0xdf, 0x56, 0x32, 0x4a, 0x72, 0x10, 0xcc, 
  0x30, 0x27, 0xc4, 0x71, 0xbf, 0x92, 0x5e, 0xa2, 0x11, 0xa4, 0x37, 0x37, 0x50, 0x0a, 0x7d, 0x10, 
  0x74, 0x84, 0xdc, 0x7e, 0xf7, 0xf9, 0xf1, 0x03, 0x6d, 0xf8, 0xdd, 0xbb, 0x79, 0x85, 0x32, 0x87, 
  0x7f, 0x3e, 0xd2, 0x9a, 0xd3, 0x77, 0x01, 0x49, 0x44, 0x3a, 0x41, 0x6a, 0x39, 0x05, 0x61, 0x46, 
  0xaa, 0x76, 0xd9, 0x27, 0x16, 0xb3, 0xf2, 0xc5, 0x04, 0x3f, 0x8a, 0x31, 0x32, 0xe7, 0x45, 0x62, 
  0xd5, 0xf9, 0xc0, 0x54, 0x28, 0xe3, 0x0c, 0x13, 0xaa, 0x87, 0xfd, 0xb6, 0x71, 0xd0, 0x9a, 0x86, 
  0x10, 0xe3, 0x15, 0xe8, 0xd4, 0x49, 0x70, 0xcc, 0x5f, 0xfc, 0xe8, 0x6f, 0x40, 0xd0, 0x39, 0x38, 
  0x1d, 0x94, 0x37, 0xcc, 0xa1, 0x63, 0x2b, 0x99, 0xb1, 0xac, 0xf2, 0x00, 0x75, 0xb1, 0x07, 0x7d, 
  0x26, 0xb8, 0xc7, 0x08, 0xdf, 0x0b, 0x54, 0x81, 0xef, 0xcf, 0x67, 0x79, 0x7e, 0xc7, 0xcf, 0x13, 
  0x04, 0x94, 0x8f, 0x30, 0x8a, 0x7e, 0x33, 0x44, 0x61, 0x45, 0x5e, 0xc4, 0xd7, 0x26, 0xd8, 0x58, 
  0xbc, 0x81, 0xd3, 0x75, 0xbf, 0xe0, 0x39, 0x6b, 0xb7, 0x5a, 0xb3, 0xe1, 0x20, 0xe3, 0x24, 0x80, 
  0xb7, 0x76, 0x17, 0xa7, 0x1e, 0x25, 0x73, 0x48, 0xc5, 0x8f, 0x37, 0x47, 0xdb, 0xce, 0x2e, 0x87, 
  0x8f, 0x34, 0x14, 0xf7, 0x2b, 0xf6, 0xaf, 0x08, 0x6c, 0xe4, 0xf3, 0x28, 0x08, 0xac, 0x96, 0x4f, 
  0x0c, 0x7c, 0x21, 0x5c, 0x86, 0x7c, 0x7b, 0xc1, 0xfe, 0x6f, 0x1a, 0x7e, 0xde, 0xb7, 0xb6, 0x01, 
  0x73, 0xd1, 0xe5, 0xcf, 0xe2, 0x3d, 0x25, 0xb7, 0x48, 0x13, 0xf2, 0x3c, 0x5f, 0xba, 0x36, 0x74, 
  0xbf, 0xd1, 0x39, 0x12, 0x3f, 0xb4, 0xcf, 0x9b, 0x0e, 0x92, 0x96, 0xc4, 0xd2, 0x08, 0x6e, 0x59, 
  0xc6, 0x80, 0x5e, 0xf8, 0x55, 0xcd, 0xcc, 0xa6, 0x61, 0x50, 0xbe, 0xcd, 0xea, 0xc4, 0x52, 0xde, 
  0x44, 0x78, 0x56, 0x43, 0x5a, 0x21, 0x4e, 0x13, 0x0a, 0x1a, 0x98, 0x2d, 0x8f, 0x62, 0xcb, 0x60, 
  0x1f, 0x03, 0x10, 0x8f, 0x9f, 0xe9, 0x68, 0x15, 0xbf, 0x17, 0xa1, 0xc6, 0x89, 0xe3, 0x21, 0x15, 
  0xed, 0xec, 0x47, 0x02, 0x53, 0x17, 0x19, 0x3e, 0x09, 0x18, 0xad, 0x7e, 0xee, 0xeb, 0xa5, 0x5b, 
  0xf5, 0x31, 0x95, 0x7d, 0x1a, 0xd2, 0xc5, 0x10, 0x3d, 0xc6, 0x47, 0xbc, 0x67, 0xec, 0xb7, 0x6b, 
  0x7e, 0x5e, 0xca, 0x57, 0x11, 0x95, 0x4e, 0x10, 0x8a, 0x29, 0xa1, 0xbd, 0xb5, 0x90, 0x87, 0x00, 
  0x79, 0x97, 0xa4, 0xc6, 0x44, 0xad, 0xb6, 0x27, 0x13, 0x8f, 0x27, 0xef, 0xf9, 0x69, 0xc8, 0x4e, 
  0x57, 0xaa, 0xfc, 0x4e, 0xc8, 0x75, 0x2e, 0xc0, 0x03, 0xf9, 0xa9, 0x9c, 0x94, 0x57, 0x88, 0xd0, 
  0xad, 0x54, 0x23, 0x0f, 0x77, 0xb7, 0x50, 0xcb, 0x10, 0x5a, 0x05, 0x6f, 0x4c, 0xc7, 0x71, 0x5a, 
  0xb0, 0xd9, 0xec, 0x86, 0xdd, 0x9c, 0xab, 0xf9, 0xcd, 0xe0, 0x0e, 0x12, 0x90, 0x5b, 0xbf, 0x82, 
  0x35, 0xe5, 0x67, 0x6e, 0xd2, 0x3f, 0x3e, 0xcf, 0xa6, 0xff, 0x7d, 0x90, 0x51, 0x18, 0x3b, 0xfa, 
  0x11, 0xf0, 0x22, 0x52, 0x6e, 0x68, 0x59, 0x71, 0x66, 0xcd, 0x5a, 0x71, 0x28, 0x45, 0xb1, 0x56, 
  0x21, 0xf5, 0xfe, 0x47, 0xb3, 0x69, 0xfa, 0x03, 0xaf, 0x9a, 0x7c, 0xab, 0x5c, 0x27, 0x52, 0xe7, 
  0xfc, 0xd0, 0x9a, 0x97, 0x90, 0x89, 0x9a, 0x2b, 0xd9, 0xa7, 0x00, 0x73, 0x09, 0x87, 0x20, 0x2f, 
  0xa7, 0x7e, 0xcc, 0x83, 0xc0, 0x07, 0x28, 0xf5, 0xc6, 0xd6, 0xab, 0x6e, 0x9d, 0x5d, 0x13, 0x19, 
  0x20, 0xe7, 0x26, 0xec, 0x41, 0x9d, 0x5d, 0x0e, 0x5f, 0x42, 0xe0, 0xbf, 0xab, 0x84, 0xb2, 0x79, 
  0x81, 0x01, 0xae, 0xb1, 0xa2, 0x8f, 0xf2, 0x1a, 0xd0, 0x4c, 0x72, 0xa2, 0x28, 0x36, 0x42, 0x51, 
  0x19, 0x0e, 0x02, 0x27, 0x46, 0xb3, 0x23, 0xfb, 0x07, 0x98, 0x30, 0xfb, 0x67, 0xf9, 0x41, 0xc6, 
  0xd2, 0xfa, 0x35, 0x11, 0x0d, 0x07, 0x9e, 0xd1, 0x41, 0xd3, 0xff, 0x07, 0x3d, 0xfb, 0x99, 0xfa, 
  0x6d, 0x2e, 0x00, 0x00, 
};
#endif  // #if AS_COMPRESS_DESCRIPTION && !defined(AS_NO_DESCRIPTION)

#if AS_COMPRESS_DESCRIPTION && !defined(AS_NO_DESCRIPTION)
static constexpr uint64_t _GENERATOR_ = AS_GENERATOR::AS_KRETURN;
#endif

static const STATUS_ITEM Status[] =
{
  /*0*/ { (uint32_t)0x00000000, "kOSReturnSuccess", AS_DESCR_HANDLE("Operation successful.", 0), Src_OSReturnh, AS_OS_MAC },
  /*1*/ { (uint32_t)0, "KERN_SUCCESS", AS_DESCR_HANDLE("", 22), Src_kern_returnh, AS_OS_MAC },
  /*2*/ { (uint32_t)0x00000000, "MACH_MSG_SUCCESS", AS_DESCR_HANDLE("", 23), Src_messageh, AS_OS_MAC },
  /*3*/ { (uint32_t)0x00000001, "kOSReturnError", AS_DESCR_HANDLE("Unspecified Libkern error.", 24), Src_OSReturnh, AS_OS_MAC },
  /*4*/ { (uint32_t)1, "KERN_INVALID_ADDRESS", AS_DESCR_HANDLE("Specified address is not currently valid.", 51), Src_kern_returnh, AS_OS_MAC },
  /*5*/ { (uint32_t)2, "KERN_PROTECTION_FAILURE", AS_DESCR_HANDLE("Specified memory is valid, but does not permit the required forms of access.", 93), Src_kern_returnh, AS_OS_MAC },
  /*6*/ { (uint32_t)3, "KERN_NO_SPACE", AS_DESCR_HANDLE("The address range specified is already in use, or no address range of the size specified could be found.", 170), Src_kern_returnh, AS_OS_MAC },
  /*7*/ { (uint32_t)4, "KERN_INVALID_ARGUMENT", AS_DESCR_HANDLE("The function requested was not applicable to this type of argument, or an argument is invalid", 275), Src_kern_returnh, AS_OS_MAC },
  /*8*/ { (uint32_t)5, "KERN_FAILURE", AS_DESCR_HANDLE("The function could not be performed.  A catch-all.", 369), Src_kern_returnh, AS_OS_MAC },
  /*9*/ { (uint32_t)6, "KERN_RESOURCE_SHORTAGE", AS_DESCR_HANDLE("A system resource could not be allocated to fulfill this request.  This failure may not be permanent.", 420), Src_kern_returnh, AS_OS_MAC },
  /*10*/ { (uint32_t)7, "KERN_NOT_RECEIVER", AS_DESCR_HANDLE("The task in question does not hold receive rights for the port argument.", 522), Src_kern_returnh, AS_OS_MAC },
  /*11*/ { (uint32_t)8, "KERN_NO_ACCESS", AS_DESCR_HANDLE("Bogus access restriction.", 595), Src_kern_returnh, AS_OS_MAC },
  /*12*/ { (uint32_t)9, "KERN_MEMORY_FAILURE", AS_DESCR_HANDLE("During a page fault, the target address refers to a memory object that has been destroyed.  This failure is permanent.", 621), Src_kern_returnh, AS_OS_MAC },
  /*13*/ { (uint32_t)10, "KERN_MEMORY_ERROR", AS_DESCR_HANDLE("During a page fault, the memory object indicated that the data could not be returned.  This failure may be temporary; future attempts to access this same data may succeed, as defined by the memory object.", 740), Src_kern_returnh, AS_OS_MAC },
  /*14*/ { (uint32_t)11, "KERN_ALREADY_IN_SET", AS_DESCR_HANDLE("The receive right is already a member of the portset.", 945), Src_kern_returnh, AS_OS_MAC },
  /*15*/ { (uint32_t)12, "KERN_NOT_IN_SET", AS_DESCR_HANDLE("The receive right is not a member of a port set.", 999), Src_kern_returnh, AS_OS_MAC },
  /*16*/ { (uint32_t)13, "KERN_NAME_EXISTS", AS_DESCR_HANDLE("The name already denotes a right in the task.", 1048), Src_kern_returnh, AS_OS_MAC },
  /*17*/ { (uint32_t)14, "KERN_ABORTED", AS_DESCR_HANDLE("The operation was aborted.  Ipc code will catch this and reflect it as a message error.", 1094), Src_kern_returnh, AS_OS_MAC },
  /*18*/ { (uint32_t)15, "KERN_INVALID_NAME", AS_DESCR_HANDLE("The name doesn't denote a right in the task.", 1182), Src_kern_returnh, AS_OS_MAC },
  /*19*/ { (uint32_t)16, "KERN_INVALID_TASK", AS_DESCR_HANDLE("Target task isn't an active task.", 1227), Src_kern_returnh, AS_OS_MAC },
  /*20*/ { (uint32_t)17, "KERN_INVALID_RIGHT", AS_DESCR_HANDLE("The name denotes a right, but not an appropriate right.", 1261), Src_kern_returnh, AS_OS_MAC },
  /*21*/ { (uint32_t)18, "KERN_INVALID_VALUE", AS_DESCR_HANDLE("A blatant range error.", 1317), Src_kern_returnh, AS_OS_MAC },
  /*22*/ { (uint32_t)19, "KERN_UREFS_OVERFLOW", AS_DESCR_HANDLE("Operation would overflow limit on user-references.", 1340), Src_kern_returnh, AS_OS_MAC },
  /*23*/ { (uint32_t)20, "KERN_INVALID_CAPABILITY", AS_DESCR_HANDLE("The supplied (port) capability is improper.", 1391), Src_kern_returnh, AS_OS_MAC },
  /*24*/ { (uint32_t)21, "KERN_RIGHT_EXISTS", AS_DESCR_HANDLE("The task already has send or receive rights for the port under another name.", 1435), Src_kern_returnh, AS_OS_MAC },
  /*25*/ { (uint32_t)22, "KERN_INVALID_HOST", AS_DESCR_HANDLE("Target host isn't actually a host.", 1512), Src_kern_returnh, AS_OS_MAC },
  /*26*/ { (uint32_t)23, "KERN_MEMORY_PRESENT", AS_DESCR_HANDLE("An attempt was made to supply \"precious\" data for memory that is already present in a memory object.", 1547), Src_kern_returnh, AS_OS_MAC },
  /*27*/ { (uint32_t)24, "KERN_MEMORY_DATA_MOVED", AS_DESCR_HANDLE("A page was requested of a memory manager via memory_object_data_request for an object using a MEMORY_OBJECT_COPY_CALL strategy, with the VM_PROT_WANTS_COPY flag being used to specify that the page desired is for a copy of the object, and the memory manager has detected the page was pushed into a copy of the object while the kernel was walking the shadow chain from the copy to the object. This error code is delivered via memory_object_data_error and is handled by the kernel (it forces the kernel to restart the fault). It will not be seen by users.", 1650), Src_kern_returnh, AS_OS_MAC },
  /*28*/ { (uint32_t)25, "KERN_MEMORY_RESTART_COPY", AS_DESCR_HANDLE("A strategic copy was attempted of an object upon which a quicker copy is now possible. The caller should retry the copy using vm_object_copy_quickly. This error code is seen only by the kernel.", 2203), Src_kern_returnh, AS_OS_MAC },
  /*29*/ { (uint32_t)26, "KERN_INVALID_PROCESSOR_SET", AS_DESCR_HANDLE("An argument applied to assert processor set privilege was not a processor set control port.", 2397), Src_kern_returnh, AS_OS_MAC },
  /*30*/ { (uint32_t)27, "KERN_POLICY_LIMIT", AS_DESCR_HANDLE("The specified scheduling attributes exceed the thread's limits.", 2489), Src_kern_returnh, AS_OS_MAC },
  /*31*/ { (uint32_t)28, "KERN_INVALID_POLICY", AS_DESCR_HANDLE("The specified scheduling policy is not currently enabled for the processor set.", 2553), Src_kern_returnh, AS_OS_MAC },
  /*32*/ { (uint32_t)29, "KERN_INVALID_OBJECT", AS_DESCR_HANDLE("The external memory manager failed to initialize the memory object.", 2633), Src_kern_returnh, AS_OS_MAC },
  /*33*/ { (uint32_t)30, "KERN_ALREADY_WAITING", AS_DESCR_HANDLE("A thread is attempting to wait for an event for which there is already a waiting thread.", 2701), Src_kern_returnh, AS_OS_MAC },
  /*34*/ { (uint32_t)31, "KERN_DEFAULT_SET", AS_DESCR_HANDLE("An attempt was made to destroy the default processor set.", 2790), Src_kern_returnh, AS_OS_MAC },
  /*35*/ { (uint32_t)32, "KERN_EXCEPTION_PROTECTED", AS_DESCR_HANDLE("An attempt was made to fetch an exception port that is protected, or to abort a thread while processing a protected exception.", 2848), Src_kern_returnh, AS_OS_MAC },
  /*36*/ { (uint32_t)33, "KERN_INVALID_LEDGER", AS_DESCR_HANDLE("A ledger was required but not supplied.", 2975), Src_kern_returnh, AS_OS_MAC },
  /*37*/ { (uint32_t)34, "KERN_INVALID_MEMORY_CONTROL", AS_DESCR_HANDLE("The port was not a memory cache control port.", 3015), Src_kern_returnh, AS_OS_MAC },
  /*38*/ { (uint32_t)35, "KERN_INVALID_SECURITY", AS_DESCR_HANDLE("An argument supplied to assert security privilege was not a host security port.", 3061), Src_kern_returnh, AS_OS_MAC },
  /*39*/ { (uint32_t)36, "KERN_NOT_DEPRESSED", AS_DESCR_HANDLE("thread_depress_abort was called on a thread which was not currently depressed.", 3141), Src_kern_returnh, AS_OS_MAC },
  /*40*/ { (uint32_t)37, "KERN_TERMINATED", AS_DESCR_HANDLE("Object has been terminated and is no longer available", 3220), Src_kern_returnh, AS_OS_MAC },
  /*41*/ { (uint32_t)38, "KERN_LOCK_SET_DESTROYED", AS_DESCR_HANDLE("Lock set has been destroyed and is no longer available.", 3274), Src_kern_returnh, AS_OS_MAC },
  /*42*/ { (uint32_t)39, "KERN_LOCK_UNSTABLE", AS_DESCR_HANDLE("The thread holding the lock terminated before releasing the lock", 3330), Src_kern_returnh, AS_OS_MAC },
  /*43*/ { (uint32_t)40, "KERN_LOCK_OWNED", AS_DESCR_HANDLE("The lock is already owned by another thread", 3395), Src_kern_returnh, AS_OS_MAC },
  /*44*/ { (uint32_t)41, "KERN_LOCK_OWNED_SELF", AS_DESCR_HANDLE("The lock is already owned by the calling thread", 3439), Src_kern_returnh, AS_OS_MAC },
  /*45*/ { (uint32_t)42, "KERN_SEMAPHORE_DESTROYED", AS_DESCR_HANDLE("Semaphore has been destroyed and is no longer available.", 3487), Src_kern_returnh, AS_OS_MAC },
  /*46*/ { (uint32_t)43, "KERN_RPC_SERVER_TERMINATED", AS_DESCR_HANDLE("Return from RPC indicating the target server was terminated before it successfully replied", 3544), Src_kern_returnh, AS_OS_MAC },
  /*47*/ { (uint32_t)44, "KERN_RPC_TERMINATE_ORPHAN", AS_DESCR_HANDLE("Terminate an orphaned activation.", 3635), Src_kern_returnh, AS_OS_MAC },
  /*48*/ { (uint32_t)45, "KERN_RPC_CONTINUE_ORPHAN", AS_DESCR_HANDLE("Allow an orphaned activation to continue executing.", 3669), Src_kern_returnh, AS_OS_MAC },
  /*49*/ { (uint32_t)46, "KERN_NOT_SUPPORTED", AS_DESCR_HANDLE("Empty thread activation (No thread linked to it)", 3721), Src_kern_returnh, AS_OS_MAC },
  /*50*/ { (uint32_t)47, "KERN_NODE_DOWN", AS_DESCR_HANDLE("Remote node down or inaccessible.", 3770), Src_kern_returnh, AS_OS_MAC },
  /*51*/ { (uint32_t)48, "KERN_NOT_WAITING", AS_DESCR_HANDLE("A signalled thread was not actually waiting.", 3804), Src_kern_returnh, AS_OS_MAC },
  /*52*/ { (uint32_t)49, "KERN_OPERATION_TIMED_OUT", AS_DESCR_HANDLE("Some thread-oriented operation (semaphore_wait) timed out", 3849), Src_kern_returnh, AS_OS_MAC },
  /*53*/ { (uint32_t)50, "KERN_CODESIGN_ERROR", AS_DESCR_HANDLE("During a page fault, indicates that the page was rejected as a result of a signature check.", 3907), Src_kern_returnh, AS_OS_MAC },
  /*54*/ { (uint32_t)51, "KERN_POLICY_STATIC", AS_DESCR_HANDLE("The requested property cannot be changed at this time.", 3999), Src_kern_returnh, AS_OS_MAC },
  /*55*/ { (uint32_t)52, "KERN_INSUFFICIENT_BUFFER_SIZE", AS_DESCR_HANDLE("The provided buffer is of insufficient size for the requested data.", 4054), Src_kern_returnh, AS_OS_MAC },
  /*56*/ { (uint32_t)53, "KERN_DENIED", AS_DESCR_HANDLE("Denied by security policy", 4122), Src_kern_returnh, AS_OS_MAC },
  /*57*/ { (uint32_t)0x00000400, "MACH_MSG_VM_KERNEL", AS_DESCR_HANDLE("Kernel resource shortage handling out-of-line memory.", 4148), Src_messageh, AS_OS_MAC },
  /*58*/ { (uint32_t)0x00000800, "MACH_MSG_IPC_KERNEL", AS_DESCR_HANDLE("Kernel resource shortage handling an IPC capability.", 4202), Src_messageh, AS_OS_MAC },
  /*59*/ { (uint32_t)0x00001000, "MACH_MSG_VM_SPACE", AS_DESCR_HANDLE("No room in VM address space for out-of-line memory.", 4255), Src_messageh, AS_OS_MAC },
  /*60*/ { (uint32_t)0x00002000, "MACH_MSG_IPC_SPACE", AS_DESCR_HANDLE("No room in IPC name space for another capability name.", 4307), Src_messageh, AS_OS_MAC },
  /*61*/ { (uint32_t)0x00003e00, "MACH_MSG_MASK", AS_DESCR_HANDLE("All special error code bits defined below.", 4362), Src_messageh, AS_OS_MAC },
  /*62*/ { (uint32_t)0x10000001, "MACH_SEND_IN_PROGRESS", AS_DESCR_HANDLE("Thread is waiting to send.  (Internal use only.)", 4405), Src_messageh, AS_OS_MAC },
  /*63*/ { (uint32_t)0x10000002, "MACH_SEND_INVALID_DATA", AS_DESCR_HANDLE("Bogus in-line data.", 4454), Src_messageh, AS_OS_MAC },
  /*64*/ { (uint32_t)0x10000003, "MACH_SEND_INVALID_DEST", AS_DESCR_HANDLE("Bogus destination port.", 4474), Src_messageh, AS_OS_MAC },
  /*65*/ { (uint32_t)0x10000004, "MACH_SEND_TIMED_OUT", AS_DESCR_HANDLE("Message not sent before timeout expired.", 4498), Src_messageh, AS_OS_MAC },
  /*66*/ { (uint32_t)0x10000005, "MACH_SEND_INVALID_VOUCHER", AS_DESCR_HANDLE("Bogus voucher port.", 4539), Src_messageh, AS_OS_MAC },
  /*67*/ { (uint32_t)0x10000007, "MACH_SEND_INTERRUPTED", AS_DESCR_HANDLE("Software interrupt.", 4559), Src_messageh, AS_OS_MAC },
  /*68*/ { (uint32_t)0x10000008, "MACH_SEND_MSG_TOO_SMALL", AS_DESCR_HANDLE("Data doesn't contain a complete message.", 4579), Src_messageh, AS_OS_MAC },
  /*69*/ { (uint32_t)0x10000009, "MACH_SEND_INVALID_REPLY", AS_DESCR_HANDLE("Bogus reply port.", 4620), Src_messageh, AS_OS_MAC },
  /*70*/ { (uint32_t)0x1000000a, "MACH_SEND_INVALID_RIGHT", AS_DESCR_HANDLE("Bogus port rights in the message body.", 4638), Src_messageh, AS_OS_MAC },
  /*71*/ { (uint32_t)0x1000000b, "MACH_SEND_INVALID_NOTIFY", AS_DESCR_HANDLE("Bogus notify port argument.", 4677), Src_messageh, AS_OS_MAC },
  /*72*/ { (uint32_t)0x1000000c, "MACH_SEND_INVALID_MEMORY", AS_DESCR_HANDLE("Invalid out-of-line memory pointer.", 4705), Src_messageh, AS_OS_MAC },
  /*73*/ { (uint32_t)0x1000000d, "MACH_SEND_NO_BUFFER", AS_DESCR_HANDLE("No message buffer is available.", 4741), Src_messageh, AS_OS_MAC },
  /*74*/ { (uint32_t)0x1000000e, "MACH_SEND_TOO_LARGE", AS_DESCR_HANDLE("Send is too large for port", 4773), Src_messageh, AS_OS_MAC },
  /*75*/ { (uint32_t)0x1000000f, "MACH_SEND_INVALID_TYPE", AS_DESCR_HANDLE("Invalid msg-type specification.", 4800), Src_messageh, AS_OS_MAC },
  /*76*/ { (uint32_t)0x10000010, "MACH_SEND_INVALID_HEADER", AS_DESCR_HANDLE("A field in the header had a bad value.", 4832), Src_messageh, AS_OS_MAC },
  /*77*/ { (uint32_t)0x10000011, "MACH_SEND_INVALID_TRAILER", AS_DESCR_HANDLE("The trailer to be sent does not match kernel format.", 4871), Src_messageh, AS_OS_MAC },
  /*78*/ { (uint32_t)0x10000012, "MACH_SEND_INVALID_CONTEXT", AS_DESCR_HANDLE("The sending thread context did not match the context on the dest port", 4924), Src_messageh, AS_OS_MAC },
  /*79*/ { (uint32_t)0x10000015, "MACH_SEND_INVALID_RT_OOL_SIZE", AS_DESCR_HANDLE("compatibility: no longer a returned error", 4994), Src_messageh, AS_OS_MAC },
  /*80*/ { (uint32_t)0x10000016, "MACH_SEND_NO_GRANT_DEST", AS_DESCR_HANDLE("The destination port doesn't accept ports in body", 5036), Src_messageh, AS_OS_MAC },
  /*81*/ { (uint32_t)0x10000017, "MACH_SEND_MSG_FILTERED", AS_DESCR_HANDLE("Message send was rejected by message filter", 5086), Src_messageh, AS_OS_MAC },
  /*82*/ { (uint32_t)0x10004001, "MACH_RCV_IN_PROGRESS", AS_DESCR_HANDLE("Thread is waiting for receive.  (Internal use only.)", 5130), Src_messageh, AS_OS_MAC },
  /*83*/ { (uint32_t)0x10004002, "MACH_RCV_INVALID_NAME", AS_DESCR_HANDLE("Bogus name for receive port/port-set.", 5183), Src_messageh, AS_OS_MAC },
  /*84*/ { (uint32_t)0x10004003, "MACH_RCV_TIMED_OUT", AS_DESCR_HANDLE("Didn't get a message within the timeout value.", 5221), Src_messageh, AS_OS_MAC },
  /*85*/ { (uint32_t)0x10004004, "MACH_RCV_TOO_LARGE", AS_DESCR_HANDLE("Message buffer is not large enough for inline data.", 5268), Src_messageh, AS_OS_MAC },
  /*86*/ { (uint32_t)0x10004005, "MACH_RCV_INTERRUPTED", AS_DESCR_HANDLE("Software interrupt.", 5320), Src_messageh, AS_OS_MAC },
  /*87*/ { (uint32_t)0x10004006, "MACH_RCV_PORT_CHANGED", AS_DESCR_HANDLE("compatibility: no longer a returned error", 5340), Src_messageh, AS_OS_MAC },
  /*88*/ { (uint32_t)0x10004007, "MACH_RCV_INVALID_NOTIFY", AS_DESCR_HANDLE("Bogus notify port argument.", 5382), Src_messageh, AS_OS_MAC },
  /*89*/ { (uint32_t)0x10004008, "MACH_RCV_INVALID_DATA", AS_DESCR_HANDLE("Bogus message buffer for inline data.", 5410), Src_messageh, AS_OS_MAC },
  /*90*/ { (uint32_t)0x10004009, "MACH_RCV_PORT_DIED", AS_DESCR_HANDLE("Port/set was sent away/died during receive.", 5448), Src_messageh, AS_OS_MAC },
  /*91*/ { (uint32_t)0x1000400a, "MACH_RCV_IN_SET", AS_DESCR_HANDLE("compatibility: no longer a returned error", 5492), Src_messageh, AS_OS_MAC },
  /*92*/ { (uint32_t)0x1000400b, "MACH_RCV_HEADER_ERROR", AS_DESCR_HANDLE("Error receiving message header.  See special bits.", 5534), Src_messageh, AS_OS_MAC },
  /*93*/ { (uint32_t)0x1000400c, "MACH_RCV_BODY_ERROR", AS_DESCR_HANDLE("Error receiving message body.  See special bits.", 5585), Src_messageh, AS_OS_MAC },
  /*94*/ { (uint32_t)0x1000400d, "MACH_RCV_INVALID_TYPE", AS_DESCR_HANDLE("Invalid msg-type specification in scatter list.", 5634), Src_messageh, AS_OS_MAC },
  /*95*/ { (uint32_t)0x1000400e, "MACH_RCV_SCATTER_SMALL", AS_DESCR_HANDLE("Out-of-line overwrite region is not large enough", 5682), Src_messageh, AS_OS_MAC },
  /*96*/ { (uint32_t)0x1000400f, "MACH_RCV_INVALID_TRAILER", AS_DESCR_HANDLE("trailer type or number of trailer elements not supported", 5731), Src_messageh, AS_OS_MAC },
  /*97*/ { (uint32_t)0x10004011, "MACH_RCV_IN_PROGRESS_TIMED", AS_DESCR_HANDLE("Waiting for receive with timeout. (Internal use only.)", 5788), Src_messageh, AS_OS_MAC },
  /*98*/ { (uint32_t)0x10004012, "MACH_RCV_INVALID_REPLY", AS_DESCR_HANDLE("invalid reply port used in a STRICT_REPLY message", 5843), Src_messageh, AS_OS_MAC },
  /*99*/ { (uint32_t)0xDC004001, "kOSMetaClassInternal", AS_DESCR_HANDLE("Internal OSMetaClass run-time error.", 5893), Src_OSReturnh, AS_OS_MAC },
  /*100*/ { (uint32_t)0xDC004002, "kOSMetaClassHasInstances", AS_DESCR_HANDLE("A kext cannot be unloaded because there are instances derived from Libkern C++ classes that it defines.", 5930), Src_OSReturnh, AS_OS_MAC },
  /*101*/ { (uint32_t)0xDC004003, "kOSMetaClassNoInit", AS_DESCR_HANDLE("Internal error: The Libkern C++ class registration system was not properly initialized during kext loading.", 6034), Src_OSReturnh, AS_OS_MAC },
  /*102*/ { (uint32_t)0xDC004004, "kOSMetaClassNoTempData", AS_DESCR_HANDLE("Internal error: An allocation failure occurred registering Libkern C++ classes during kext loading.", 6142), Src_OSReturnh, AS_OS_MAC },
  /*103*/ { (uint32_t)0xDC004005, "kOSMetaClassNoDicts", AS_DESCR_HANDLE("Internal error: An allocation failure occurred registering Libkern C++ classes during kext loading.", 6242), Src_OSReturnh, AS_OS_MAC },
  /*104*/ { (uint32_t)0xDC004006, "kOSMetaClassNoKModSet", AS_DESCR_HANDLE("Internal error: An allocation failure occurred registering Libkern C++ classes during kext loading.", 6342), Src_OSReturnh, AS_OS_MAC },
  /*105*/ { (uint32_t)0xDC004007, "kOSMetaClassNoInsKModSet", AS_DESCR_HANDLE("Internal error: An error occurred registering a specific Libkern C++ class during kext loading.", 6442), Src_OSReturnh, AS_OS_MAC },
  /*106*/ { (uint32_t)0xDC004008, "kOSMetaClassNoSuper", AS_DESCR_HANDLE("Internal error: No superclass can be found for a specific Libkern C++ class during kext loading.", 6538), Src_OSReturnh, AS_OS_MAC },
  /*107*/ { (uint32_t)0xDC004009, "kOSMetaClassInstNoSuper", AS_DESCR_HANDLE("Internal error: No superclass can be found when constructing an instance of a Libkern C++ class.", 6635), Src_OSReturnh, AS_OS_MAC },
  /*108*/ { (uint32_t)0xDC00400A, "kOSMetaClassDuplicateClass", AS_DESCR_HANDLE("A duplicate Libkern C++ classname was encountered during kext loading.", 6732), Src_OSReturnh, AS_OS_MAC },
  /*109*/ { (uint32_t)0xDC00400B, "kOSMetaClassNoKext", AS_DESCR_HANDLE("Internal error: The kext for a Libkern C++ class can't be found during kext loading.", 6803), Src_OSReturnh, AS_OS_MAC },
  /*110*/ { (uint32_t)0xDC008001, "kOSKextReturnInternalError", AS_DESCR_HANDLE("An internal error in the kext library. Contrast with <code>@link //apple_ref/c/econst/OSReturnError OSReturnError@/link</code>.", 6888), Src_OSKextLibh, AS_OS_MAC },
  /*111*/ { (uint32_t)0xDC008002, "kOSKextReturnNoMemory", AS_DESCR_HANDLE("Memory allocation failed.", 7016), Src_OSKextLibh, AS_OS_MAC },
  /*112*/ { (uint32_t)0xDC008003, "kOSKextReturnNoResources", AS_DESCR_HANDLE("Some resource other than memory (such as available load tags) is exhausted.", 7042), Src_OSKextLibh, AS_OS_MAC },
  /*113*/ { (uint32_t)0xDC008004, "kOSKextReturnNotPrivileged", AS_DESCR_HANDLE("The caller lacks privileges to perform the requested operation.", 7118), Src_OSKextLibh, AS_OS_MAC },
  /*114*/ { (uint32_t)0xDC008005, "kOSKextReturnInvalidArgument", AS_DESCR_HANDLE("Invalid argument.", 7182), Src_OSKextLibh, AS_OS_MAC },
  /*115*/ { (uint32_t)0xDC008006, "kOSKextReturnNotFound", AS_DESCR_HANDLE("Search item not found.", 7200), Src_OSKextLibh, AS_OS_MAC },
  /*116*/ { (uint32_t)0xDC008007, "kOSKextReturnBadData", AS_DESCR_HANDLE("Malformed data (not used for XML).", 7223), Src_OSKextLibh, AS_OS_MAC },
  /*117*/ { (uint32_t)0xDC008008, "kOSKextReturnSerialization", AS_DESCR_HANDLE("Error converting or (un)serializing URL, string, or XML.", 7258), Src_OSKextLibh, AS_OS_MAC },
  /*118*/ { (uint32_t)0xDC008009, "kOSKextReturnUnsupported", AS_DESCR_HANDLE("Operation is no longer or not yet supported.", 7315), Src_OSKextLibh, AS_OS_MAC },
  /*119*/ { (uint32_t)0xDC00800A, "kOSKextReturnDisabled", AS_DESCR_HANDLE("Operation is currently disabled.", 7360), Src_OSKextLibh, AS_OS_MAC },
  /*120*/ { (uint32_t)0xDC00800B, "kOSKextReturnNotAKext", AS_DESCR_HANDLE("Bundle is not a kernel extension.", 7393), Src_OSKextLibh, AS_OS_MAC },
  /*121*/ { (uint32_t)0xDC00800C, "kOSKextReturnValidation", AS_DESCR_HANDLE("Validation failures encountered; check diagnostics for details.", 7427), Src_OSKextLibh, AS_OS_MAC },
  /*122*/ { (uint32_t)0xDC00800D, "kOSKextReturnAuthentication", AS_DESCR_HANDLE("Authetication failures encountered; check diagnostics for details.", 7491), Src_OSKextLibh, AS_OS_MAC },
  /*123*/ { (uint32_t)0xDC00800E, "kOSKextReturnDependencies", AS_DESCR_HANDLE("Dependency resolution failures encountered; check diagnostics for details.", 7558), Src_OSKextLibh, AS_OS_MAC },
  /*124*/ { (uint32_t)0xDC00800F, "kOSKextReturnArchNotFound", AS_DESCR_HANDLE("Kext does not contain code for the requested architecture.", 7633), Src_OSKextLibh, AS_OS_MAC },
  /*125*/ { (uint32_t)0xDC008010, "kOSKextReturnCache", AS_DESCR_HANDLE("An error occurred processing a system kext cache.", 7692), Src_OSKextLibh, AS_OS_MAC },
  /*126*/ { (uint32_t)0xDC008011, "kOSKextReturnDeferred", AS_DESCR_HANDLE("Operation has been posted asynchronously to user space (kernel only).", 7742), Src_OSKextLibh, AS_OS_MAC },
  /*127*/ { (uint32_t)0xDC008012, "kOSKextReturnBootLevel", AS_DESCR_HANDLE("Kext not loadable or operation not allowed at current boot level.", 7812), Src_OSKextLibh, AS_OS_MAC },
  /*128*/ { (uint32_t)0xDC008013, "kOSKextReturnNotLoadable", AS_DESCR_HANDLE("Kext cannot be loaded; check diagnostics for details.", 7878), Src_OSKextLibh, AS_OS_MAC },
  /*129*/ { (uint32_t)0xDC008014, "kOSKextReturnLoadedVersionDiffers", AS_DESCR_HANDLE("A different version (or executable UUID, or executable by checksum) of the requested kext is already loaded.", 7932), Src_OSKextLibh, AS_OS_MAC },
  /*130*/ { (uint32_t)0xDC008015, "kOSKextReturnDependencyLoadError", AS_DESCR_HANDLE("A load error occurred on a dependency of the kext being loaded.", 8041), Src_OSKextLibh, AS_OS_MAC },
  /*131*/ { (uint32_t)0xDC008016, "kOSKextReturnLinkError", AS_DESCR_HANDLE("A link failure occured with this kext or a dependency.", 8105), Src_OSKextLibh, AS_OS_MAC },
  /*132*/ { (uint32_t)0xDC008017, "kOSKextReturnStartStopError", AS_DESCR_HANDLE("The kext start or stop routine returned an error.", 8160), Src_OSKextLibh, AS_OS_MAC },
  /*133*/ { (uint32_t)0xDC008018, "kOSKextReturnInUse", AS_DESCR_HANDLE("The kext is currently in use or has outstanding references, and cannot be unloaded.", 8210), Src_OSKextLibh, AS_OS_MAC },
  /*134*/ { (uint32_t)0xDC008019, "kOSKextReturnTimeout", AS_DESCR_HANDLE("A kext request has timed out.", 8294), Src_OSKextLibh, AS_OS_MAC },
  /*135*/ { (uint32_t)0xDC00801A, "kOSKextReturnStopping", AS_DESCR_HANDLE("The kext is in the process of stopping; requests cannot be made.", 8324), Src_OSKextLibh, AS_OS_MAC },
  /*136*/ { (uint32_t)0xDC00801B, "kOSKextReturnSystemPolicy", AS_DESCR_HANDLE("The kext was prevented from loading due to system policy.", 8389), Src_OSKextLibh, AS_OS_MAC },
  /*137*/ { (uint32_t)0xDC00801C, "kOSKextReturnKCLoadFailure", AS_DESCR_HANDLE("Loading of the System KC failed", 8447), Src_OSKextLibh, AS_OS_MAC },
  /*138*/ { (uint32_t)0xDC00801D, "kOSKextReturnKCLoadFailureSystemKC", AS_DESCR_HANDLE("If both the System and Aux KCs fail to load, then the error code will be: libkern_kext_err(0x1f)", 8479), Src_OSKextLibh, AS_OS_MAC },
  /*139*/ { (uint32_t)0xDC00801E, "kOSKextReturnKCLoadFailureAuxKC", AS_DESCR_HANDLE("If both the System and Aux KCs fail to load, then the error code will be: libkern_kext_err(0x1f)", 8576), Src_OSKextLibh, AS_OS_MAC },
  /*140*/ { (uint32_t)0xE0000001, "kIOReturnInvalid", AS_DESCR_HANDLE("should never be seen", 8673), Src_IOReturnh, AS_OS_MAC },
  /*141*/ { (uint32_t)0xE00002BC, "kIOReturnError", AS_DESCR_HANDLE("general error", 8694), Src_IOReturnh, AS_OS_MAC },
  /*142*/ { (uint32_t)0xE00002BD, "kIOReturnNoMemory", AS_DESCR_HANDLE("can't allocate memory", 8708), Src_IOReturnh, AS_OS_MAC },
  /*143*/ { (uint32_t)0xE00002BE, "kIOReturnNoResources", AS_DESCR_HANDLE("resource shortage", 8730), Src_IOReturnh, AS_OS_MAC },
  /*144*/ { (uint32_t)0xE00002BF, "kIOReturnIPCError", AS_DESCR_HANDLE("error during IPC", 8748), Src_IOReturnh, AS_OS_MAC },
  /*145*/ { (uint32_t)0xE00002C0, "kIOReturnNoDevice", AS_DESCR_HANDLE("no such device", 8765), Src_IOReturnh, AS_OS_MAC },
  /*146*/ { (uint32_t)0xE00002C1, "kIOReturnNotPrivileged", AS_DESCR_HANDLE("privilege violation", 8780), Src_IOReturnh, AS_OS_MAC },
  /*147*/ { (uint32_t)0xE00002C2, "kIOReturnBadArgument", AS_DESCR_HANDLE("invalid argument", 8800), Src_IOReturnh, AS_OS_MAC },
  /*148*/ { (uint32_t)0xE00002C3, "kIOReturnLockedRead", AS_DESCR_HANDLE("device read locked", 8817), Src_IOReturnh, AS_OS_MAC },
  /*149*/ { (uint32_t)0xE00002C4, "kIOReturnLockedWrite", AS_DESCR_HANDLE("device write locked", 8836), Src_IOReturnh, AS_OS_MAC },
  /*150*/ { (uint32_t)0xE00002C5, "kIOReturnExclusiveAccess", AS_DESCR_HANDLE("exclusive access and", 8856), Src_IOReturnh, AS_OS_MAC },
  /*151*/ { (uint32_t)0xE00002C6, "kIOReturnBadMessageID", AS_DESCR_HANDLE("sent/received messages", 8877), Src_IOReturnh, AS_OS_MAC },
  /*152*/ { (uint32_t)0xE00002C7, "kIOReturnUnsupported", AS_DESCR_HANDLE("unsupported function", 8900), Src_IOReturnh, AS_OS_MAC },
  /*153*/ { (uint32_t)0xE00002C8, "kIOReturnVMError", AS_DESCR_HANDLE("misc. VM failure", 8921), Src_IOReturnh, AS_OS_MAC },
  /*154*/ { (uint32_t)0xE00002C9, "kIOReturnInternalError", AS_DESCR_HANDLE("internal error", 8938), Src_IOReturnh, AS_OS_MAC },
  /*155*/ { (uint32_t)0xE00002CA, "kIOReturnIOError", AS_DESCR_HANDLE("General I/O error", 8953), Src_IOReturnh, AS_OS_MAC },
  /*156*/ { (uint32_t)0xE00002CB, "kIOReturn???Error", AS_DESCR_HANDLE("???", 8971), Src_IOReturnh, AS_OS_MAC },
  /*157*/ { (uint32_t)0xE00002CC, "kIOReturnCannotLock", AS_DESCR_HANDLE("can't acquire lock", 8975), Src_IOReturnh, AS_OS_MAC },
  /*158*/ { (uint32_t)0xE00002CD, "kIOReturnNotOpen", AS_DESCR_HANDLE("device not open", 8994), Src_IOReturnh, AS_OS_MAC },
  /*159*/ { (uint32_t)0xE00002CE, "kIOReturnNotReadable", AS_DESCR_HANDLE("read not supported", 9010), Src_IOReturnh, AS_OS_MAC },
  /*160*/ { (uint32_t)0xE00002CF, "kIOReturnNotWritable", AS_DESCR_HANDLE("write not supported", 9029), Src_IOReturnh, AS_OS_MAC },
  /*161*/ { (uint32_t)0xE00002D0, "kIOReturnNotAligned", AS_DESCR_HANDLE("alignment error", 9049), Src_IOReturnh, AS_OS_MAC },
  /*162*/ { (uint32_t)0xE00002D1, "kIOReturnBadMedia", AS_DESCR_HANDLE("Media Error", 9065), Src_IOReturnh, AS_OS_MAC },
  /*163*/ { (uint32_t)0xE00002D2, "kIOReturnStillOpen", AS_DESCR_HANDLE("device(s) still open", 9077), Src_IOReturnh, AS_OS_MAC },
  /*164*/ { (uint32_t)0xE00002D3, "kIOReturnRLDError", AS_DESCR_HANDLE("rld failure", 9098), Src_IOReturnh, AS_OS_MAC },
  /*165*/ { (uint32_t)0xE00002D4, "kIOReturnDMAError", AS_DESCR_HANDLE("DMA failure", 9110), Src_IOReturnh, AS_OS_MAC },
  /*166*/ { (uint32_t)0xE00002D5, "kIOReturnBusy", AS_DESCR_HANDLE("Device Busy", 9122), Src_IOReturnh, AS_OS_MAC },
  /*167*/ { (uint32_t)0xE00002D6, "kIOReturnTimeout", AS_DESCR_HANDLE("I/O Timeout", 9134), Src_IOReturnh, AS_OS_MAC },
  /*168*/ { (uint32_t)0xE00002D7, "kIOReturnOffline", AS_DESCR_HANDLE("device offline", 9146), Src_IOReturnh, AS_OS_MAC },
  /*169*/ { (uint32_t)0xE00002D8, "kIOReturnNotReady", AS_DESCR_HANDLE("not ready", 9161), Src_IOReturnh, AS_OS_MAC },
  /*170*/ { (uint32_t)0xE00002D9, "kIOReturnNotAttached", AS_DESCR_HANDLE("device not attached", 9171), Src_IOReturnh, AS_OS_MAC },
  /*171*/ { (uint32_t)0xE00002DA, "kIOReturnNoChannels", AS_DESCR_HANDLE("no DMA channels left", 9191), Src_IOReturnh, AS_OS_MAC },
  /*172*/ { (uint32_t)0xE00002DB, "kIOReturnNoSpace", AS_DESCR_HANDLE("no space for data", 9212), Src_IOReturnh, AS_OS_MAC },
  /*173*/ { (uint32_t)0xE00002DD, "kIOReturnPortExists", AS_DESCR_HANDLE("port already exists", 9230), Src_IOReturnh, AS_OS_MAC },
  /*174*/ { (uint32_t)0xE00002DE, "kIOReturnCannotWire", AS_DESCR_HANDLE("can't wire down", 9250), Src_IOReturnh, AS_OS_MAC },
  /*175*/ { (uint32_t)0xE00002DF, "kIOReturnNoInterrupt", AS_DESCR_HANDLE("no interrupt attached", 9266), Src_IOReturnh, AS_OS_MAC },
  /*176*/ { (uint32_t)0xE00002E0, "kIOReturnNoFrames", AS_DESCR_HANDLE("no DMA frames enqueued", 9288), Src_IOReturnh, AS_OS_MAC },
  /*177*/ { (uint32_t)0xE00002E1, "kIOReturnMessageTooLarge", AS_DESCR_HANDLE("oversized msg received", 9311), Src_IOReturnh, AS_OS_MAC },
  /*178*/ { (uint32_t)0xE00002E2, "kIOReturnNotPermitted", AS_DESCR_HANDLE("not permitted", 9334), Src_IOReturnh, AS_OS_MAC },
  /*179*/ { (uint32_t)0xE00002E3, "kIOReturnNoPower", AS_DESCR_HANDLE("no power to device", 9348), Src_IOReturnh, AS_OS_MAC },
  /*180*/ { (uint32_t)0xE00002E4, "kIOReturnNoMedia", AS_DESCR_HANDLE("media not present", 9367), Src_IOReturnh, AS_OS_MAC },
  /*181*/ { (uint32_t)0xE00002E5, "kIOReturnUnformattedMedia", AS_DESCR_HANDLE("media not formatted", 9385), Src_IOReturnh, AS_OS_MAC },
  /*182*/ { (uint32_t)0xE00002E6, "kIOReturnUnsupportedMode", AS_DESCR_HANDLE("no such mode", 9405), Src_IOReturnh, AS_OS_MAC },
  /*183*/ { (uint32_t)0xE00002E7, "kIOReturnUnderrun", AS_DESCR_HANDLE("data underrun", 9418), Src_IOReturnh, AS_OS_MAC },
  /*184*/ { (uint32_t)0xE00002E8, "kIOReturnOverrun", AS_DESCR_HANDLE("data overrun", 9432), Src_IOReturnh, AS_OS_MAC },
  /*185*/ { (uint32_t)0xE00002E9, "kIOReturnDeviceError", AS_DESCR_HANDLE("the device is not working properly!", 9445), Src_IOReturnh, AS_OS_MAC },
  /*186*/ { (uint32_t)0xE00002EA, "kIOReturnNoCompletion", AS_DESCR_HANDLE("a completion routine is required", 9481), Src_IOReturnh, AS_OS_MAC },
  /*187*/ { (uint32_t)0xE00002EB, "kIOReturnAborted", AS_DESCR_HANDLE("operation aborted", 9514), Src_IOReturnh, AS_OS_MAC },
  /*188*/ { (uint32_t)0xE00002EC, "kIOReturnNoBandwidth", AS_DESCR_HANDLE("bus bandwidth would be exceeded", 9532), Src_IOReturnh, AS_OS_MAC },
  /*189*/ { (uint32_t)0xE00002ED, "kIOReturnNotResponding", AS_DESCR_HANDLE("device not responding", 9564), Src_IOReturnh, AS_OS_MAC },
  /*190*/ { (uint32_t)0xE00002EE, "kIOReturnIsoTooOld", AS_DESCR_HANDLE("isochronous I/O request for distant past!", 9586), Src_IOReturnh, AS_OS_MAC },
  /*191*/ { (uint32_t)0xE00002EF, "kIOReturnIsoTooNew", AS_DESCR_HANDLE("isochronous I/O request for distant future", 9628), Src_IOReturnh, AS_OS_MAC },
  /*192*/ { (uint32_t)0xE00002F0, "kIOReturnNotFound", AS_DESCR_HANDLE("data was not found", 9671), Src_IOReturnh, AS_OS_MAC },
  /*193*/ { (uint32_t)0xE0004001, "kIOUSBCRCErr", AS_DESCR_HANDLE("Pipe stall, bad CRC", 9690), Src_IOKitusbUSBh, AS_OS_MAC },
  /*194*/ { (uint32_t)0xE0004002, "kIOUSBBitstufErr", AS_DESCR_HANDLE("Pipe stall, bitstuffing", 9710), Src_IOKitusbUSBh, AS_OS_MAC },
  /*195*/ { (uint32_t)0xE0004003, "kIOUSBDataToggleErr", AS_DESCR_HANDLE("Pipe stall, Bad data toggle", 9734), Src_IOKitusbUSBh, AS_OS_MAC },
  /*196*/ { (uint32_t)0xE0004006, "kIOUSBPIDCheckErr", AS_DESCR_HANDLE("Pipe stall, PID CRC error", 9762), Src_IOKitusbUSBh, AS_OS_MAC },
  /*197*/ { (uint32_t)0xE0004007, "kIOUSBWrongPIDErr", AS_DESCR_HANDLE("Pipe stall, Bad or wrong PID", 9788), Src_IOKitusbUSBh, AS_OS_MAC },
  /*198*/ { (uint32_t)0xE000400A, "kIOUSBReserved1Err", AS_DESCR_HANDLE("Reserved", 9817), Src_IOKitusbUSBh, AS_OS_MAC },
  /*199*/ { (uint32_t)0xE000400B, "kIOUSBReserved2Err", AS_DESCR_HANDLE("Reserved", 9826), Src_IOKitusbUSBh, AS_OS_MAC },
  /*200*/ { (uint32_t)0xE000400C, "kIOUSBBufferOverrunErr", AS_DESCR_HANDLE("Buffer Overrun (Host hardware failure on data out, PCI busy?)", 9835), Src_IOKitusbUSBh, AS_OS_MAC },
  /*201*/ { (uint32_t)0xE000400D, "kIOUSBBufferUnderrunErr", AS_DESCR_HANDLE("Buffer Underrun (Host hardware failure on data out, PCI busy?)", 9897), Src_IOKitusbUSBh, AS_OS_MAC },
  /*202*/ { (uint32_t)0xE000400E, "kIOUSBNotSent1Err", AS_DESCR_HANDLE("Transaction not sent", 9960), Src_IOKitusbUSBh, AS_OS_MAC },
  /*203*/ { (uint32_t)0xE000400F, "kIOUSBNotSent2Err", AS_DESCR_HANDLE("Transaction not sent", 9981), Src_IOKitusbUSBh, AS_OS_MAC },
  /*204*/ { (uint32_t)0xE0004010, "kIOUSBLinkErr", AS_DESCR_HANDLE("", 10002), Src_IOKitusbUSBh, AS_OS_MAC },
  /*205*/ { (uint32_t)0xE0004042, "kIOUSBTooManyTransactionsPending", AS_DESCR_HANDLE("The transaction cannot be submitted because it would exceed the allowed number of pending transactions", 10003), Src_IOKitusbUSBh, AS_OS_MAC },
  /*206*/ { (uint32_t)0xE0004043, "kIOUSBInvalidSSEndpoint", AS_DESCR_HANDLE("An endpoint found in a SuperSpeed device is invalid (usually because there is no Endpoint Companion Descriptor)", 10106), Src_IOKitusbUSBh, AS_OS_MAC },
  /*207*/ { (uint32_t)0xE0004044, "kIOUSBStreamsNotSupported", AS_DESCR_HANDLE("The request cannot be completed because the XHCI controller does not support streams", 10218), Src_IOKitusbUSBh, AS_OS_MAC },
  /*208*/ { (uint32_t)0xE0004045, "kIOUSBDeviceCountExceeded", AS_DESCR_HANDLE("The device cannot be enumerated because the controller cannot support more devices", 10303), Src_IOKitusbUSBh, AS_OS_MAC },
  /*209*/ { (uint32_t)0xE0004046, "kIOUSBEndpointCountExceeded", AS_DESCR_HANDLE("The endpoint was not created because the controller cannot support more endpoints", 10386), Src_IOKitusbUSBh, AS_OS_MAC },
  /*210*/ { (uint32_t)0xE0004047, "kIOUSBDevicePortWasNotSuspended", AS_DESCR_HANDLE("Port was not suspended", 10468), Src_IOKitusbUSBh, AS_OS_MAC },
  /*211*/ { (uint32_t)0xE0004048, "kIOUSBClearPipeStallNotRecursive", AS_DESCR_HANDLE("IOUSBPipe::ClearPipeStall should not be called recursively", 10491), Src_IOKitusbUSBh, AS_OS_MAC },
  /*212*/ { (uint32_t)0xE0004049, "kIOUSBDeviceNotHighSpeed", AS_DESCR_HANDLE("Name is deprecated, see below", 10550), Src_IOKitusbUSBh, AS_OS_MAC },
  /*213*/ { (uint32_t)0xE0004049, "kIOUSBDeviceTransferredToCompanion", AS_DESCR_HANDLE("The device has been tranferred to another controller for enumeration", 10580), Src_IOKitusbUSBh, AS_OS_MAC },
  /*214*/ { (uint32_t)0xE000404A, "kIOUSBSyncRequestOnWLThread", AS_DESCR_HANDLE("A synchronous USB request was made on the workloop thread (from a callback?).  Only async requests are permitted in that case", 10649), Src_IOKitusbUSBh, AS_OS_MAC },
  /*215*/ { (uint32_t)0xE000404B, "kIOUSBHighSpeedSplitError", AS_DESCR_HANDLE("Error to hub on high speed bus trying to do split transaction", 10775), Src_IOKitusbUSBh, AS_OS_MAC },
  /*216*/ { (uint32_t)0xE000404C, "kIOUSBLowLatencyFrameListNotPreviouslyAllocated", AS_DESCR_HANDLE("Attempted to use user land low latency isoc calls w/out calling PrepareBuffer (on the frame list) first", 10837), Src_IOKitusbUSBh, AS_OS_MAC },
  /*217*/ { (uint32_t)0xE000404D, "kIOUSBLowLatencyBufferNotPreviouslyAllocated", AS_DESCR_HANDLE("Attempted to use user land low latency isoc calls w/out calling PrepareBuffer (on the data buffer) first", 10941), Src_IOKitusbUSBh, AS_OS_MAC },
  /*218*/ { (uint32_t)0xE000404E, "kIOUSBInterfaceNotFound", AS_DESCR_HANDLE("Interface ref not recognized", 11046), Src_IOKitusbUSBh, AS_OS_MAC },
  /*219*/ { (uint32_t)0xE000404F, "kIOUSBPipeStalled", AS_DESCR_HANDLE("Pipe has stalled, error needs to be cleared", 11075), Src_IOKitusbUSBh, AS_OS_MAC },
  /*220*/ { (uint32_t)0xE0004050, "kIOUSBTransactionReturned", AS_DESCR_HANDLE("The transaction has been returned to the caller", 11119), Src_IOKitusbUSBh, AS_OS_MAC },
  /*221*/ { (uint32_t)0xE0004051, "kIOUSBTransactionTimeout", AS_DESCR_HANDLE("Transaction timed out", 11167), Src_IOKitusbUSBh, AS_OS_MAC },
  /*222*/ { (uint32_t)0xE0004052, "kIOUSBPortWasSuspended", AS_DESCR_HANDLE("The transaction was returned because the port was suspended", 11189), Src_IOKitusbUSBh, AS_OS_MAC },
  /*223*/ { (uint32_t)0xE0004056, "kIOUSBConfigNotFound", AS_DESCR_HANDLE("Configuration Not found", 11249), Src_IOKitusbUSBh, AS_OS_MAC },
  /*224*/ { (uint32_t)0xE0004057, "kIOUSBEndpointNotFound", AS_DESCR_HANDLE("Endpoint Not found", 11273), Src_IOKitusbUSBh, AS_OS_MAC },
  /*225*/ { (uint32_t)0xE000405D, "kIOUSBNotEnoughPowerErr", AS_DESCR_HANDLE("not enough power for selected configuration", 11292), Src_IOKitusbUSBh, AS_OS_MAC },
  /*226*/ { (uint32_t)0xE000405E, "kIOUSBNotEnoughPipesErr", AS_DESCR_HANDLE("not enough pipes in interface", 11336), Src_IOKitusbUSBh, AS_OS_MAC },
  /*227*/ { (uint32_t)0xE000405F, "kIOUSBNoAsyncPortErr", AS_DESCR_HANDLE("no async port", 11366), Src_IOKitusbUSBh, AS_OS_MAC },
  /*228*/ { (uint32_t)0xE0004060, "kIOUSBTooManyPipesErr", AS_DESCR_HANDLE("Too many pipes", 11380), Src_IOKitusbUSBh, AS_OS_MAC },
  /*229*/ { (uint32_t)0xE0004061, "kIOUSBUnknownPipeErr", AS_DESCR_HANDLE("Pipe ref not recognized", 11395), Src_IOKitusbUSBh, AS_OS_MAC },
  /*230*/ { (uint32_t)0xE0008001, "kIOConfigNoEntry", AS_DESCR_HANDLE("Can't find requested entry in ROM", 11419), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*231*/ { (uint32_t)0xE0008002, "kIOFireWirePending", AS_DESCR_HANDLE("In pending queue waiting to execute", 11453), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*232*/ { (uint32_t)0xE0008003, "kIOFireWireLastDCLToken", AS_DESCR_HANDLE("Last DCL callback of program (internal use)", 11489), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*233*/ { (uint32_t)0xE0008004, "kIOFireWireConfigROMInvalid", AS_DESCR_HANDLE("", 11533), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*234*/ { (uint32_t)0xE0008005, "kIOFireWireAlreadyRegistered", AS_DESCR_HANDLE("", 11534), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*235*/ { (uint32_t)0xE0008006, "kIOFireWireMultipleTalkers", AS_DESCR_HANDLE("", 11535), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*236*/ { (uint32_t)0xE0008007, "kIOFireWireChannelActive", AS_DESCR_HANDLE("", 11536), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*237*/ { (uint32_t)0xE0008008, "kIOFireWireNoListenerOrTalker", AS_DESCR_HANDLE("", 11537), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*238*/ { (uint32_t)0xE0008009, "kIOFireWireNoChannels", AS_DESCR_HANDLE("", 11538), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*239*/ { (uint32_t)0xE000800A, "kIOFireWireChannelNotAvailable", AS_DESCR_HANDLE("", 11539), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*240*/ { (uint32_t)0xE000800B, "kIOFireWireSeparateBus", AS_DESCR_HANDLE("", 11540), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*241*/ { (uint32_t)0xE000800C, "kIOFireWireBadSelfIDs", AS_DESCR_HANDLE("", 11541), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*242*/ { (uint32_t)0xE000800D, "kIOFireWireLowCableVoltage", AS_DESCR_HANDLE("", 11542), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*243*/ { (uint32_t)0xE000800E, "kIOFireWireInsufficientPower", AS_DESCR_HANDLE("", 11543), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*244*/ { (uint32_t)0xE000800F, "kIOFireWireOutOfTLabels", AS_DESCR_HANDLE("", 11544), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*245*/ { (uint32_t)0xE0008020, "kIOFireWireBusReset", AS_DESCR_HANDLE("Bus reset during command execution (current bus generation does not match that specified in command).", 11545), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*246*/ { (uint32_t)0xE0008101, "kIOFireWireBogusDCLProgram", AS_DESCR_HANDLE("", 11647), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*247*/ { (uint32_t)0xE0008102, "kIOFireWireTalkingAndListening", AS_DESCR_HANDLE("", 11648), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*248*/ { (uint32_t)0xE0008103, "kIOFireWireHardwareSlept", AS_DESCR_HANDLE("", 11649), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*249*/ { (uint32_t)0xE0008104, "kIOFireWireCompleting", AS_DESCR_HANDLE("In the middle of completing", 11650), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*250*/ { (uint32_t)0xE0008105, "kIOFireWireInvalidResponseLength", AS_DESCR_HANDLE("Invalid Response Length", 11678), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*251*/ { (uint32_t)0xE0008106, "kIOFireWireIsochBandwidthNotAvailable", AS_DESCR_HANDLE("Isoch Bandwidth Not Available", 11702), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*252*/ { (uint32_t)0xE00087D0, "kIOFWMessageServiceIsRequestingClose", AS_DESCR_HANDLE("", 11732), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*253*/ { (uint32_t)0xE00087D1, "kIOFWMessagePowerStateChanged", AS_DESCR_HANDLE("", 11733), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*254*/ { (uint32_t)0xE00087D2, "kIOFWMessageTopologyChanged", AS_DESCR_HANDLE("", 11734), Src_IOKitfirewireIOFireWireFamilyCommonh, AS_OS_MAC },
  /*255*/ { (uint32_t)0xE0020001, "kIOBluetoothDeviceResetError", AS_DESCR_HANDLE("Device reset interrupted pending operation", 11735), Src_IOKitbluetoothIOBluetoothTypes, AS_OS_MAC },
  /*256*/ { (uint32_t)0xE0020002, "kIOBluetoothConnectionAlreadyExists", AS_DESCR_HANDLE("Attempting to open a connection that already exists", 11778), Src_IOKitbluetoothIOBluetoothTypes, AS_OS_MAC },
  /*257*/ { (uint32_t)0xE0020003, "kIOBluetoothNoHCIController", AS_DESCR_HANDLE("", 11830), Src_IOKitbluetoothIOBluetoothTypes, AS_OS_MAC },
  /*258*/ { (uint32_t)0xE0020004, "kIOBluetoothHCIPowerStatesNotSupported", AS_DESCR_HANDLE("HCI controller does not support changing power states", 11831), Src_IOKitbluetoothIOBluetoothTypes, AS_OS_MAC },
  { (uint32_t)0, nullptr }
};

// 
// Item count: 259
// Constant names: 5550 bytes
// Description text: 11626 bytes
// Duplicated names: 0 
// Duplicated constants: 2 kOSReturnSuccess kIOUSBDeviceNotHighSpeed
// Constant duplication count: 4
// 

static int Name2CodeHash0List[6] = {4, 26, 51, 124, 170, -1};
static int Name2CodeHash1List[7] = {15, 65, 105, 140, 219, 229, -1};
static int Name2CodeHash2List[5] = {12, 116, 158, 254, -1};
static int Name2CodeHash3List[5] = {58, 181, 204, 232, -1};
static int Name2CodeHash4List[3] = {120, 161, -1};
static int Name2CodeHash5List[7] = {36, 69, 135, 149, 195, 231, -1};
static int Name2CodeHash6List[9] = {13, 31, 38, 91, 109, 150, 178, 251, -1};
static int Name2CodeHash7List[5] = {48, 95, 145, 209, -1};
static int Name2CodeHash8List[5] = {87, 110, 153, 184, -1};
static int Name2CodeHash9List[6] = {42, 113, 183, 211, 256, -1};
static int Name2CodeHash10List[5] = {62, 141, 188, 197, -1};
static int Name2CodeHash11List[7] = {11, 20, 100, 218, 234, 238, -1};
static int Name2CodeHash12List[4] = {5, 169, 208, -1};
static int Name2CodeHash13List[3] = {2, 53, -1};
static int Name2CodeHash14List[4] = {50, 89, 104, -1};
static int Name2CodeHash15List[4] = {81, 207, 226, -1};
static int Name2CodeHash16List[1] = {-1};
static int Name2CodeHash17List[5] = {35, 123, 126, 205, -1};
static int Name2CodeHash18List[3] = {17, 199, -1};
static int Name2CodeHash19List[3] = {14, 68, -1};
static int Name2CodeHash20List[9] = {6, 23, 59, 96, 97, 155, 216, 225, -1};
static int Name2CodeHash21List[5] = {8, 80, 200, 230, -1};
static int Name2CodeHash22List[3] = {71, 111, -1};
static int Name2CodeHash23List[2] = {63, -1};
static int Name2CodeHash24List[7] = {3, 64, 74, 94, 142, 194, -1};
static int Name2CodeHash25List[8] = {9, 99, 102, 130, 131, 171, 177, -1};
static int Name2CodeHash26List[3] = {73, 121, -1};
static int Name2CodeHash27List[5] = {32, 86, 172, 214, -1};
static int Name2CodeHash28List[6] = {133, 134, 163, 196, 239, -1};
static int Name2CodeHash29List[5] = {18, 61, 179, 244, -1};
static int Name2CodeHash30List[3] = {1, 168, -1};
static int Name2CodeHash31List[3] = {114, 118, -1};
static int Name2CodeHash32List[9] = {10, 76, 90, 107, 167, 187, 217, 247, -1};
static int Name2CodeHash33List[5] = {75, 165, 198, 213, -1};
static int Name2CodeHash34List[1] = {-1};
static int Name2CodeHash35List[3] = {119, 128, -1};
static int Name2CodeHash36List[4] = {83, 157, 246, -1};
static int Name2CodeHash37List[6] = {56, 148, 159, 174, 235, -1};
static int Name2CodeHash38List[3] = {60, 152, -1};
static int Name2CodeHash39List[2] = {139, -1};
static int Name2CodeHash40List[8] = {21, 82, 103, 132, 146, 191, 252, -1};
static int Name2CodeHash41List[5] = {88, 233, 242, 243, -1};
static int Name2CodeHash42List[8] = {29, 45, 101, 137, 203, 220, 253, -1};
static int Name2CodeHash43List[6] = {67, 78, 138, 210, 215, -1};
static int Name2CodeHash44List[5] = {47, 92, 173, 236, -1};
static int Name2CodeHash45List[7] = {24, 25, 33, 112, 240, 245, -1};
static int Name2CodeHash46List[4] = {7, 125, 206, -1};
static int Name2CodeHash47List[5] = {22, 106, 108, 221, -1};
static int Name2CodeHash48List[4] = {117, 164, 224, -1};
static int Name2CodeHash49List[6] = {28, 30, 46, 70, 72, -1};
static int Name2CodeHash50List[7] = {37, 57, 77, 84, 166, 185, -1};
static int Name2CodeHash51List[6] = {16, 40, 180, 192, 227, -1};
static int Name2CodeHash52List[6] = {43, 44, 66, 122, 156, -1};
static int Name2CodeHash53List[5] = {127, 147, 151, 222, -1};
static int Name2CodeHash54List[5] = {41, 143, 193, 257, -1};
static int Name2CodeHash55List[4] = {0, 39, 175, -1};
static int Name2CodeHash56List[7] = {85, 98, 162, 189, 190, 223, -1};
static int Name2CodeHash57List[9] = {52, 79, 93, 154, 160, 201, 202, 255, -1};
static int Name2CodeHash58List[4] = {182, 212, 250, -1};
static int Name2CodeHash59List[7] = {19, 54, 115, 129, 144, 228, -1};
static int Name2CodeHash60List[6] = {27, 34, 55, 186, 241, -1};
static int Name2CodeHash61List[4] = {136, 176, 248, -1};
static int Name2CodeHash62List[3] = {49, 237, -1};
static int Name2CodeHash63List[3] = {249, 258, -1};

static const int* Name2CodeHashTable[] =
{
  Name2CodeHash0List,
  Name2CodeHash1List,
  Name2CodeHash2List,
  Name2CodeHash3List,
  Name2CodeHash4List,
  Name2CodeHash5List,
  Name2CodeHash6List,
  Name2CodeHash7List,
  Name2CodeHash8List,
  Name2CodeHash9List,
  Name2CodeHash10List,
  Name2CodeHash11List,
  Name2CodeHash12List,
  Name2CodeHash13List,
  Name2CodeHash14List,
  Name2CodeHash15List,
  Name2CodeHash16List,
  Name2CodeHash17List,
  Name2CodeHash18List,
  Name2CodeHash19List,
  Name2CodeHash20List,
  Name2CodeHash21List,
  Name2CodeHash22List,
  Name2CodeHash23List,
  Name2CodeHash24List,
  Name2CodeHash25List,
  Name2CodeHash26List,
  Name2CodeHash27List,
  Name2CodeHash28List,
  Name2CodeHash29List,
  Name2CodeHash30List,
  Name2CodeHash31List,
  Name2CodeHash32List,
  Name2CodeHash33List,
  Name2CodeHash34List,
  Name2CodeHash35List,
  Name2CodeHash36List,
  Name2CodeHash37List,
  Name2CodeHash38List,
  Name2CodeHash39List,
  Name2CodeHash40List,
  Name2CodeHash41List,
  Name2CodeHash42List,
  Name2CodeHash43List,
  Name2CodeHash44List,
  Name2CodeHash45List,
  Name2CodeHash46List,
  Name2CodeHash47List,
  Name2CodeHash48List,
  Name2CodeHash49List,
  Name2CodeHash50List,
  Name2CodeHash51List,
  Name2CodeHash52List,
  Name2CodeHash53List,
  Name2CodeHash54List,
  Name2CodeHash55List,
  Name2CodeHash56List,
  Name2CodeHash57List,
  Name2CodeHash58List,
  Name2CodeHash59List,
  Name2CodeHash60List,
  Name2CodeHash61List,
  Name2CodeHash62List,
  Name2CodeHash63List
};

static int Code2NameHash0List[5] = {64, 102, 139, 226, -1};
static int Code2NameHash1List[5] = {65, 76, 103, 227, -1};
static int Code2NameHash2List[4] = {66, 77, 104, -1};
static int Code2NameHash3List[3] = {78, 105, -1};
static int Code2NameHash4List[3] = {67, 106, -1};
static int Code2NameHash5List[3] = {68, 107, -1};
static int Code2NameHash6List[4] = {69, 79, 230, -1};
static int Code2NameHash7List[3] = {80, 231, -1};
static int Code2NameHash8List[3] = {81, 232, -1};
static int Code2NameHash9List[3] = {145, 233, -1};
static int Code2NameHash10List[3] = {146, 234, -1};
static int Code2NameHash11List[3] = {147, 235, -1};
static int Code2NameHash12List[4] = {148, 236, 245, -1};
static int Code2NameHash13List[8] = {0, 1, 2, 108, 149, 161, 237, -1};
static int Code2NameHash14List[8] = {3, 4, 70, 109, 150, 162, 238, -1};
static int Code2NameHash15List[5] = {5, 71, 151, 163, -1};
static int Code2NameHash16List[7] = {6, 19, 72, 152, 164, 176, -1};
static int Code2NameHash17List[8] = {7, 20, 73, 153, 165, 177, 246, -1};
static int Code2NameHash18List[8] = {8, 21, 74, 154, 166, 178, 247, -1};
static int Code2NameHash19List[7] = {9, 22, 75, 167, 179, 248, -1};
static int Code2NameHash20List[8] = {10, 23, 35, 168, 180, 192, 249, -1};
static int Code2NameHash21List[8] = {11, 24, 36, 61, 169, 181, 250, -1};
static int Code2NameHash22List[8] = {12, 25, 37, 170, 182, 239, 251, -1};
static int Code2NameHash23List[6] = {26, 38, 51, 183, 240, -1};
static int Code2NameHash24List[6] = {27, 39, 52, 184, 241, -1};
static int Code2NameHash25List[7] = {28, 40, 53, 141, 185, 242, -1};
static int Code2NameHash26List[6] = {41, 54, 142, 155, 243, -1};
static int Code2NameHash27List[7] = {42, 55, 143, 156, 193, 244, -1};
static int Code2NameHash28List[6] = {43, 56, 144, 157, 194, -1};
static int Code2NameHash29List[5] = {44, 158, 195, 204, -1};
static int Code2NameHash30List[4] = {13, 159, 171, -1};
static int Code2NameHash31List[5] = {14, 160, 172, 252, -1};
static int Code2NameHash32List[5] = {15, 196, 253, 255, -1};
static int Code2NameHash33List[8] = {16, 29, 173, 186, 197, 254, 256, -1};
static int Code2NameHash34List[6] = {17, 30, 174, 187, 257, -1};
static int Code2NameHash35List[6] = {18, 31, 175, 188, 258, -1};
static int Code2NameHash36List[4] = {32, 60, 189, -1};
static int Code2NameHash37List[4] = {33, 45, 190, -1};
static int Code2NameHash38List[4] = {34, 46, 191, -1};
static int Code2NameHash39List[2] = {47, -1};
static int Code2NameHash40List[2] = {48, -1};
static int Code2NameHash41List[3] = {49, 110, -1};
static int Code2NameHash42List[5] = {50, 82, 111, 205, -1};
static int Code2NameHash43List[7] = {83, 112, 125, 198, 206, 220, -1};
static int Code2NameHash44List[7] = {84, 113, 126, 199, 207, 221, -1};
static int Code2NameHash45List[8] = {85, 97, 114, 127, 200, 208, 222, -1};
static int Code2NameHash46List[7] = {86, 98, 115, 128, 201, 209, -1};
static int Code2NameHash47List[9] = {58, 87, 116, 129, 140, 202, 210, 228, -1};
static int Code2NameHash48List[7] = {88, 117, 130, 203, 211, 229, -1};
static int Code2NameHash49List[7] = {89, 118, 131, 212, 213, 223, -1};
static int Code2NameHash50List[4] = {90, 132, 224, -1};
static int Code2NameHash51List[2] = {133, -1};
static int Code2NameHash52List[2] = {134, -1};
static int Code2NameHash53List[1] = {-1};
static int Code2NameHash54List[1] = {-1};
static int Code2NameHash55List[1] = {-1};
static int Code2NameHash56List[1] = {-1};
static int Code2NameHash57List[3] = {119, 214, -1};
static int Code2NameHash58List[4] = {91, 120, 215, -1};
static int Code2NameHash59List[4] = {92, 121, 216, -1};
static int Code2NameHash60List[5] = {93, 122, 135, 217, -1};
static int Code2NameHash61List[6] = {94, 99, 123, 136, 218, -1};
static int Code2NameHash62List[9] = {57, 59, 62, 95, 100, 124, 137, 219, -1};
static int Code2NameHash63List[6] = {63, 96, 101, 138, 225, -1};

static const int* Code2NameHashTable[] =
{
  Code2NameHash0List,
  Code2NameHash1List,
  Code2NameHash2List,
  Code2NameHash3List,
  Code2NameHash4List,
  Code2NameHash5List,
  Code2NameHash6List,
  Code2NameHash7List,
  Code2NameHash8List,
  Code2NameHash9List,
  Code2NameHash10List,
  Code2NameHash11List,
  Code2NameHash12List,
  Code2NameHash13List,
  Code2NameHash14List,
  Code2NameHash15List,
  Code2NameHash16List,
  Code2NameHash17List,
  Code2NameHash18List,
  Code2NameHash19List,
  Code2NameHash20List,
  Code2NameHash21List,
  Code2NameHash22List,
  Code2NameHash23List,
  Code2NameHash24List,
  Code2NameHash25List,
  Code2NameHash26List,
  Code2NameHash27List,
  Code2NameHash28List,
  Code2NameHash29List,
  Code2NameHash30List,
  Code2NameHash31List,
  Code2NameHash32List,
  Code2NameHash33List,
  Code2NameHash34List,
  Code2NameHash35List,
  Code2NameHash36List,
  Code2NameHash37List,
  Code2NameHash38List,
  Code2NameHash39List,
  Code2NameHash40List,
  Code2NameHash41List,
  Code2NameHash42List,
  Code2NameHash43List,
  Code2NameHash44List,
  Code2NameHash45List,
  Code2NameHash46List,
  Code2NameHash47List,
  Code2NameHash48List,
  Code2NameHash49List,
  Code2NameHash50List,
  Code2NameHash51List,
  Code2NameHash52List,
  Code2NameHash53List,
  Code2NameHash54List,
  Code2NameHash55List,
  Code2NameHash56List,
  Code2NameHash57List,
  Code2NameHash58List,
  Code2NameHash59List,
  Code2NameHash60List,
  Code2NameHash61List,
  Code2NameHash62List,
  Code2NameHash63List
};


void KRETURNGetTables(TABLES& t)
{
  t.Items = Status;
  t.Code2name = Code2NameHashTable;
  t.Name2code = Name2CodeHashTable;
#if AS_COMPRESS_DESCRIPTION && !defined(AS_NO_DESCRIPTION)
  t.DescrGz = CompressedDescr;
  t.DescrGzLen = sizeof(CompressedDescr);
  t.DescrLen = DescrBlockSize;
#else
  t.DescrGz = nullptr;
  t.DescrGzLen = 0;
  t.DescrLen = 0;
#endif // AS_COMPRESS_DESCRIPTION && !defined(AS_NO_DESCRIPTION)
}
